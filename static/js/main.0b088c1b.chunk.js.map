{"version":3,"sources":["components/top-bar/run-button/run-button.jsx","store/actions.js","algorithms/algorithm-util.js","algorithms/bubble-sort.js","algorithms/merge-sort.js","algorithms/quick-sort.js","algorithms/insertion_sort.js","algorithms/heap_sort.js","components/top-bar/run-button/run-button-container.js","components/top-bar/randomize-button/randomize-button.jsx","components/top-bar/randomize-button/randomize-button-container.js","components/top-bar/sorting-select/sorting-select.jsx","components/top-bar/sorting-select/sorting-select-container.js","components/top-bar/array-size-select/array-size-select.jsx","components/top-bar/array-size-select/array-size-select-container.js","components/top-bar/top-bar.jsx","components/top-bar/top-bar-container.js","components/visualizer-body/visualizer-body.jsx","components/visualizer-body/visualizer-body-container.js","components/app.jsx","components/app-container.js","store/reducers/algorithm-reducer.js","store/reducers/top-bar-reducer.js","store/reducers/root-reducer.js","store/store.js","index.js"],"names":["RunButton","handleClick","props","beginSort","selectedIndex","array","this","classes","running","Button","variant","className","runButtonDisabled","runButton","disabled","onClick","endIcon","CircularProgress","circularProgress","size","React","Component","withStyles","theme","color","palette","primary","dark","secondary","main","marginLeft","spacing","setRunning","type","payload","setArray","setCompared","compared","setToSwap","toSwap","setPivot","pivot","setSorted","sorted","available_algorithms","array_sizes","sorting_animation_delays","updateState","trace","dispatch","arraySize","speed","idx","indexOf","mapArraySizeToSpeed","updateStateHelper","length","shift","setTimeout","createArray","push","Math","floor","random","bubbleSort","len","tempArray","slice","i","j","temp","mergeSortHelper","startIdx","endIdx","updates","inPlaceObj","mid","inPlaceIndex","arr1","arr2","merged","shouldSetSorted","pass","concat","merge","mergeSort","quickSortHelper","part","partition","quickSort","insertionSort","key","heapify","index","largest","left","right","heapSort","arrayState","connect","state","settings","algorithmIndex","RandomizeButton","randomizeArray","root","randomizeButtonDisabled","randomizeButton","startIcon","marginRight","paddingRight","SortingSelect","openMenu","event","setState","anchorEl","currentTarget","handleAlgorithmSelection","setAlgorithm","handleClose","selectedAlgorithm","Menu","id","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","Boolean","onClose","map","algo","MenuItem","ArraySizeSelect","handleArraySizeSelection","setSize","TopBar","AppBar","position","Typography","noWrap","title","Grid","container","grid","button","width","backgroundColor","light","paddingLeft","borderRadius","shape","VisualizerBody","getWidth","num","justify","alignItems","arrayBody","includes","arrayElementToSwap","arrayElementCompared","arrayElementSorted","arrayElementPartition","arrayElement","style","height","top","transform","padding","flex","display","flexDirection","justifyConent","warning","error","success","App","appRoot","bodyRoot","initialState","algorithmReducer","action","topBarReducer","rootReducer","combineReducers","createStore","composeWithDevTools","ReactDOM","render","store","document","getElementById"],"mappings":"8SAkBMA,E,4MACFC,YAAc,WACV,EAAKC,MAAMC,UAAU,EAAKD,MAAME,cAAe,EAAKF,MAAMG,Q,uDAEpD,IAAD,EAIDC,KAAKJ,MAFLK,EAFC,EAEDA,QACAC,EAHC,EAGDA,QAEJ,OACI,6BACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,UAAWH,EAAUD,EAAQK,kBAAoBL,EAAQM,UACzDC,SAAUN,EACVO,QAAST,KAAKL,YACde,QAASR,EACL,kBAACS,EAAA,EAAD,CAAkBN,UAAWJ,EAAQW,iBAAkBC,KAAM,KAC7D,kBAAC,IAAD,OAPR,a,GAXQC,IAAMC,WA0BfC,eAvCA,SAAAC,GAAK,MAAK,CACrBV,UAAW,CACPW,MAAOD,EAAME,QAAQC,QAAQC,MAEjCf,kBAAmB,CACfY,MAAOD,EAAME,QAAQG,UAAUC,MAEnCX,iBAAkB,CACdM,MAAOD,EAAME,QAAQG,UAAUC,KAC/BC,WAAYP,EAAMQ,QAAQ,OA8BnBT,CAAmBtB,GC1BrBgC,EAAa,SAAAxB,GAAO,MAAK,CAClCyB,KAfuB,cAgBvBC,QAAS,CACL1B,QAASA,KAgBJ2B,EAAW,SAAA9B,GAAK,MAAK,CAC9B4B,KArCqB,YAsCrBC,QAAS,CACL7B,MAAOA,KAIF+B,EAAc,SAAAC,GAAQ,MAAK,CACpCJ,KA3CwB,eA4CxBC,QAAS,CACLG,SAAUA,KAILC,EAAY,SAAAC,GAAM,MAAK,CAChCN,KAjDuB,cAkDvBC,QAAS,CACLK,OAAQA,KAIHC,EAAW,SAAAC,GAAK,MAAK,CAC9BR,KArDqB,YAsDrBC,QAAS,CACLO,MAAOA,KAIFC,EAAY,SAAAC,GAAM,MAAK,CAChCV,KA7DsB,aA8DtBC,QAAS,CACLS,OAAQA,KC5DVC,EAAuB,CACzB,cACA,aACA,aACA,iBACA,aAGEC,EAAc,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,KACvCC,EAA2B,CAAC,IAAK,IAAK,IAAK,GAAI,GAAI,EAAG,GAOtDC,EAAc,SAACC,EAAOC,EAAUC,GAClC,IAAMC,EANkB,SAACD,GACzB,IAAME,EAAMP,EAAYQ,QAAQH,GAChC,OAAOJ,GAAkC,IAATM,EAAY,EAAIA,GAIlCE,CAAoBJ,GAClCK,EAAkBP,EAAOC,EAAUE,IAGjCI,EAAoB,SAApBA,EAAqBP,EAAOC,EAAUE,GACxC,IAAKH,EAAMQ,OAKP,OAJAP,EAASb,EAAY,KACrBa,EAASX,EAAU,KACnBW,EAAST,EAAS,UAClBS,EAASjB,GAAW,IAGxBiB,EAASD,EAAMS,SACfC,YAAW,WACPH,EAAkBP,EAAOC,EAAUE,KACpCA,IAGDQ,EAAc,SAACT,EAAWD,GAE5B,IADA,IAAI5C,EAAQ,GACLA,EAAMmD,OAASN,GAClB7C,EAAMuD,KAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAEjDd,EAASd,EAAS9B,IAClB4C,EDhBgC,CAChChB,KA1B2B,kBA2B3BC,QAAS,MELE8B,EA3BI,SAAC3D,EAAO4C,GAMvB,IALA,IAAMgB,EAAM5D,EAAMmD,OAEdR,EAAQ,GACRL,EAAS,GACTuB,EAAY7D,EAAM8D,MAAM,GACnBC,EAAI,EAAGA,EAAIH,EAAM,EAAGG,IAAK,CAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMG,EAAI,EAAGC,IAE7B,GADArB,EAAMY,KAAKxB,EAAY,CAACiC,EAAGA,EAAI,KAC3BH,EAAUG,GAAKH,EAAUG,EAAI,GAAI,CACjCrB,EAAMY,KAAKtB,EAAU,CAAC+B,EAAGA,EAAI,KAC7B,IAAIC,EAAOJ,EAAUG,GACrBH,EAAUG,GAAKH,EAAUG,EAAI,GAC7BH,EAAUG,EAAI,GAAKC,EACnBtB,EAAMY,KAAKzB,EAAS+B,EAAUC,MAAM,KACpCnB,EAAMY,KAAKtB,EAAU,KAG7BK,EAAOiB,KAAKK,EAAIG,EAAE,GAClBpB,EAAMY,KAAKlB,EAAUC,EAAOwB,UAKhC,OAHAxB,EAAOiB,KAAK,GACZZ,EAAMY,KAAKlB,EAAUC,EAAOwB,UAC5BpB,EAAYC,EAAOC,EAAU5C,EAAMmD,QAC5BnD,GCwBLkE,EAAkB,SAAlBA,EAAmBlE,EAAOmE,EAAUC,EAAQxB,EAAUyB,EAASC,EAAYhC,GAC7E,IAAMsB,EAAM5D,EAAMmD,OAClB,GAAIS,GAAO,EAAG,OAAO5D,EACrB,IAAIuE,EAAMf,KAAKC,MAAMG,EAAM,GACvBY,EAAehB,KAAKC,OAAOU,EAAWC,EAAS,GAAK,GAGxD,OAvDU,SAACK,EAAMC,EAAMP,EAAUC,EAAQzB,EAAO2B,EAAYhC,GAI5D,IAHA,IAAIqC,EAAS,GACTC,EAAkBH,EAAKtB,OAASuB,EAAKvB,SAAWmB,EAAWtE,MAAMmD,OACjE0B,EAAO,EACJJ,EAAKtB,QAAUuB,EAAKvB,QACnBsB,EAAK,GAAKC,EAAK,GACfC,EAAOpB,KAAKkB,EAAKrB,UAEjBuB,EAAOpB,KAAKmB,EAAKtB,SACjBkB,EAAWtE,MAAQsE,EAAWtE,MAAM8D,MAAM,EAAGK,GACxCW,OAAOH,GAAQG,OAAOL,GAAMK,OAAOJ,GACnCI,OAAOR,EAAWtE,MAAM8D,MAAMM,EAAS,IACxCzB,EAAMY,KAAKzB,EAASwC,EAAWtE,MAAM8D,WAE1Cc,IACCtC,EAAOiB,KAAKsB,GACZlC,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,MAEtCe,IAEJ,GAAGD,EACC,KAAMC,GAAQP,EAAWtE,MAAMmD,QAC3Bb,EAAOiB,KAAKsB,GACZlC,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,KAClCe,IAGR,OAAOF,EAAOG,OAAOL,EAAKX,QAAQgB,OAAOJ,EAAKZ,UA4BvCiB,CAFIb,EAAgBlE,EAAM8D,MAAM,EAAGS,GAAMJ,EAAUK,EAAe,EAAG5B,EAAUyB,EAASC,EAAYhC,GAC/F4B,EAAgBlE,EAAM8D,MAAMS,GAAMC,EAAcJ,EAAQxB,EAAUyB,EAASC,EAAYhC,GACzE6B,EAAUC,EAAQC,EAASC,EAAYhC,IAGtD0C,EA5BG,SAAChF,EAAO4C,GACtB,IAAID,EAAQ,GAEZuB,EAAgBlE,EAAO,EAAGA,EAAMmD,OAAS,EAAGP,EAAUD,EAAO,CAAE3C,MAAOA,EAAM8D,SAD/D,IAEbpB,EAAYC,EAAOC,EAAU5C,EAAMmD,SCPjC8B,EAAkB,SAAlBA,EAAmBjF,EAAOmE,EAAUC,EAAQzB,EAAOL,GACrD,KAAI6B,GAAYC,GAAhB,CAGA,IAAIc,EA/BU,SAAClF,EAAOmE,EAAUC,EAAQzB,EAAOL,GAC/C,IAAIyB,EAAII,EAAW,EACfH,EAAII,EAAS,EACbhC,EAAQ+B,EAEZ,IADAxB,EAAMY,KAAKpB,EAAS,CAACC,OACR,CAET,IADA2B,IACO/D,EAAM+D,GAAK/D,EAAMoC,IACpB2B,IAGJ,IADAC,IACOhE,EAAMgE,GAAKhE,EAAMoC,IACpB4B,IAEJ,GAAID,GAAKC,EAGL,OAFA1B,EAAOiB,KAAKS,GACZrB,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,KAC3BE,EAEX,IAAIC,EAAOjE,EAAM+D,GACjB/D,EAAM+D,GAAK/D,EAAMgE,GACjBhE,EAAMgE,GAAKC,EACXtB,EAAMY,KAAKtB,EAAU,CAAC8B,EAAGC,KACzBrB,EAAMY,KAAKzB,EAAS9B,EAAM8D,MAAM,MAQzBqB,CAAUnF,EAAOmE,EAAUC,EAAQzB,EAAOL,GACrD2C,EAAgBjF,EAAOmE,EAAUe,EAAMvC,EAAOL,GAC9C2C,EAAgBjF,EAAOkF,EAAO,EAAGd,EAAQzB,EAAOL,KAarC8C,EAVG,SAACpF,EAAO4C,GACtB,IAAID,EAAQ,GACRL,EAAS,GACTuB,EAAY7D,EAAM8D,MAAM,GAC5BmB,EAAgBpB,EAAW,EAAGA,EAAUV,OAAS,EAAGR,EAAOL,GAC3DA,EAAOiB,KAAKvD,EAAMmD,OAAO,GACzBR,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,KAClCpB,EAAYC,EAAOC,EAAU5C,EAAMmD,SCbxBkC,EA7BO,SAACrF,EAAO4C,GAK1B,IAJA,IAAID,EAAQ,GACRL,EAAS,GACTuB,EAAY7D,EAAM8D,MAAM,GACtBF,EAAMC,EAAUV,OACdY,EAAI,EAAGA,EAAIH,EAAKG,IAAI,CACxB,IAAIuB,EAAMzB,EAAUE,GAChBC,EAAID,EAAE,EAEV,IADApB,EAAMY,KAAKxB,EAAY,CAACiC,EAAGD,KACrBC,GAAK,GAAKH,EAAUG,GAAKsB,GAC3B3C,EAAMY,KAAKtB,EAAU,CAAC+B,EAAGA,EAAE,KAC3BH,EAAUG,EAAE,GAAKH,EAAUG,GAC3BA,IACArB,EAAMY,KAAKzB,EAAS+B,EAAUC,MAAM,KACpCnB,EAAMY,KAAKxB,EAAY,CAACiC,EAAGA,EAAE,KAEjCH,EAAUG,EAAE,GAAKsB,EACjB3C,EAAMY,KAAKzB,EAAS+B,EAAUC,MAAM,KACpCxB,EAAOiB,KAAKQ,EAAE,GACdpB,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,KAKtC,OAHAxB,EAAOiB,KAAKK,EAAI,GAChBjB,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,KAClCpB,EAAYC,EAAOC,EAAU5C,EAAMmD,QAC5BU,GCxBL0B,EAAU,SAAVA,EAAWvF,EAAO4D,EAAK4B,EAAOlD,EAAQK,GACxC,IAAI8C,EAAUD,EACVE,EAAO,EAAEF,EAAQ,EACjBG,EAAQ,EAAEH,EAAQ,EAUtB,GARIE,EAAO9B,GAAO5D,EAAMyF,GAAWzF,EAAM0F,KACrCD,EAAUC,GAGVC,EAAQ/B,GAAO5D,EAAMyF,GAAWzF,EAAM2F,KACtCF,EAAUE,GAGVF,IAAYD,EAAO,CACnB7C,EAAMY,KAAKtB,EAAU,CAACuD,EAAOC,KAC7B,IAAIxB,EAAOjE,EAAMwF,GACjBxF,EAAMwF,GAASxF,EAAMyF,GACrBzF,EAAMyF,GAAWxB,EACjBtB,EAAMY,KAAKzB,EAAS9B,EAAM8D,MAAM,KAChCyB,EAAQvF,EAAO4D,EAAK6B,EAASnD,EAAQK,KA6B9BiD,EAzBE,SAACC,EAAYjD,GAM1B,IALA,IAAI5C,EAAQ6F,EAAW/B,MAAM,GACvBF,EAAM5D,EAAMmD,OACdb,EAAS,GACTK,EAAQ,GAEJoB,EAAIP,KAAKC,MAAMG,EAAI,GAAK,EAAGG,GAAK,EAAGA,IACvCwB,EAAQvF,EAAO4D,EAAKG,EAAGzB,EAAQK,GAEnC,IAAI,IAAIoB,EAAEH,EAAI,EAAGG,EAAE,EAAGA,IAAI,CACtBpB,EAAMY,KAAKtB,EAAU,CAAC,EAAG8B,KACzB,IAAIE,EAAOjE,EAAM,GACjBA,EAAM,GAAKA,EAAM+D,GACjB/D,EAAM+D,GAAKE,EACX3B,EAAOiB,KAAKQ,GACZpB,EAAMY,KAAKzB,EAAS9B,EAAM8D,MAAM,KAChCnB,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,KAClCyB,EAAQvF,EAAO+D,EAAG,EAAGzB,EAAQK,GAKjC,OAHAL,EAAOiB,KAAK,GACZZ,EAAMY,KAAKlB,EAAUC,EAAOwB,MAAM,KAClCpB,EAAYC,EAAOC,EAAU5C,EAAMmD,QAC5BnD,GCLI8F,eAnCS,SAAAC,GACpB,MAAM,CACF7F,QAAS6F,EAAM7F,QACfH,cAAegG,EAAMC,SAASC,eAC9B9F,QAAS4F,EAAMF,WAAW1F,QAC1BH,MAAO+F,EAAMF,WAAW7F,UAIL,SAAA4C,GAAQ,MAAK,CACpC9C,UAAW,SAACmG,EAAgBjG,GAGxB,OAFA4C,EAASjB,GAAW,IACpBiB,EPY4B,CAChChB,KA1B2B,kBA2B3BC,QAAS,KObEoE,GACH,KAAK,EAED,YADAtC,EAAW3D,EAAO4C,GAEtB,KAAK,EAED,YADAoC,EAAUhF,EAAO4C,GAErB,KAAK,EAED,YADAwC,EAAUpF,EAAO4C,GAErB,KAAK,EAED,YADAyC,EAAcrF,EAAO4C,GAEzB,KAAK,EAED,YADAgD,EAAS5F,EAAO4C,GAEpB,QACI,YAKDkD,CAA6CnG,G,iBCzBtDuG,E,4MACFtG,YAAc,WACV,EAAKC,MAAMsG,eAAe,EAAKtG,MAAMG,MAAMmD,S,uDAGrC,IAAD,EAIDlD,KAAKJ,MAFLK,EAFC,EAEDA,QACAC,EAHC,EAGDA,QAEJ,OACI,yBAAKG,UAAWJ,EAAQkG,MACpB,kBAAChG,EAAA,EAAD,CACIC,QAAQ,WACRC,UAAWH,EAASD,EAAQmG,wBAA0BnG,EAAQoG,gBAC9D7F,SAAUN,EACVO,QAAST,KAAKL,YACd2G,UAAW,kBAAC,IAAD,OALf,kB,GAZcxF,IAAMC,WAyBrBC,eAtCA,SAAAC,GAAK,MAAK,CACrBkF,KAAM,CACFI,YAAatF,EAAMQ,QAAQ,IAE/B4E,gBAAiB,CACbG,aAAc,QAElBJ,wBAAyB,CACrBI,aAAc,WA8BPxF,CAAmBiF,GC1BnBJ,eAdS,SAAAC,GACpB,MAAM,CACF7F,QAAS6F,EAAM7F,QACfF,MAAO+F,EAAMF,WAAW7F,MACxBG,QAAS4F,EAAMF,WAAW1F,YAIP,SAAAyC,GAAQ,MAAK,CACpCuD,eAAgB,SAAChD,GACbG,EAAYH,EAAQP,OAIbkD,CAA6CQ,G,4CCNtDI,E,kDACF,WAAY7G,GAAO,IAAD,8BACd,cAAMA,IAKV8G,SAAW,SAACC,GACR,EAAKC,SAAS,CACVC,SAAUF,EAAMG,iBARN,EAWlBC,yBAA2B,SAACxB,GACxB,EAAK3F,MAAMoH,aAAazB,GACxB,EAAKqB,SAAS,CACVC,SAAU,QAdA,EAiBlBI,YAAc,WACV,EAAKL,SAAS,CACVC,SAAU,QAjBd,EAAKf,MAAQ,CACTe,SAAU,MAHA,E,qDAsBR,IAAD,SAKD7G,KAAKJ,MAHLK,EAFC,EAEDA,QACAiH,EAHC,EAGDA,kBACAhH,EAJC,EAIDA,QAEJ,OACI,yBAAKG,UAAWJ,EAAQkG,MACpB,kBAAChG,EAAA,EAAD,CACIC,QAAQ,WACRI,SAAUN,EACVO,QAAST,KAAK0G,SACdhG,QAAS,kBAAC,IAAD,OACRwG,GAEL,kBAACC,EAAA,EAAD,CACIC,GAAG,wBACHP,SAAU7G,KAAK8F,MAAMe,SACrBQ,mBAAoB,KACpBC,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,gBAAiB,CAAEF,SAAU,MAAOC,WAAY,UAChDE,aAAW,EACXC,KAAMC,QAAQ5H,KAAK8F,MAAMe,UACzBgB,QAAS7H,KAAKiH,aAEb3E,EAAqBwF,KAAI,SAACC,EAAMxC,GAAP,OACtB,kBAACyC,EAAA,EAAD,CACI3C,IAAK0C,EACLtH,QAAS,kBAAM,EAAKsG,yBAAyBxB,KAC/CwC,Y,GApDEjH,IAAMC,WA4DnBC,eAlEA,SAAAC,GAAK,MAAK,CACrBkF,KAAM,CACFI,YAAatF,EAAMQ,QAAQ,OAgEpBT,CAAmByF,GCvDnBZ,gBAZS,SAAAC,GACpB,MAAM,CACF7F,QAAS6F,EAAM7F,QACfiH,kBAAmB5E,EAAqBwD,EAAMC,SAASC,gBACvD9F,QAAS4F,EAAMF,WAAW1F,YAIP,SAAAyC,GAAQ,MAAK,CACpCqE,aAAc,SAAAzB,GAAK,OAAI5C,EXHoB,CAC3ChB,KAZyB,gBAazBC,QAAS,CACLoE,eWAyCT,SAGlCM,CAA6CY,GCLtDwB,G,kDACF,WAAYrI,GAAQ,IAAD,8BACf,cAAMA,IAMV8G,SAAW,SAACC,GACR,EAAKC,SAAS,CACVC,SAAUF,EAAMG,iBATL,EAYnBoB,yBAA2B,SAACrH,GACxB,EAAKjB,MAAMuI,QAAQtH,GACnB,EAAKjB,MAAMyD,YAAYxC,GACvB,EAAK+F,SAAS,CACVC,SAAU,QAhBC,EAmBnBI,YAAc,WACV,EAAKL,SAAS,CACVC,SAAU,QAnBd,EAAKf,MAAQ,CACTe,SAAU,MAHC,E,qDAwBT,IAAD,SAKD7G,KAAKJ,MAHLK,EAFC,EAEDA,QACAC,EAHC,EAGDA,QACA0C,EAJC,EAIDA,UAEJ,OACI,yBAAKvC,UAAWJ,EAAQkG,MACpB,kBAAChG,EAAA,EAAD,CACIC,QAAQ,WACRI,SAAUN,EACVO,QAAST,KAAK0G,SACdhG,QAAS,kBAAC,IAAD,OAJb,sBAKoBkC,IAEpB,kBAACuE,EAAA,EAAD,CACIC,GAAG,wBACHP,SAAU7G,KAAK8F,MAAMe,SACrBQ,mBAAoB,KACpBC,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,gBAAiB,CAAEF,SAAU,MAAOC,WAAY,UAChDE,aAAW,EACXC,KAAMC,QAAQ5H,KAAK8F,MAAMe,UACzBgB,QAAS7H,KAAKiH,aAEb1E,EAAYuF,KAAI,SAAAjH,GAAI,OACjB,kBAACmH,EAAA,EAAD,CACI3C,IAAKxE,EACLJ,QAAS,kBAAM,EAAKyH,yBAAyBrH,KAC/CA,Y,GAtDIC,IAAMC,WA8DrBC,gBApEA,SAAAC,GAAK,MAAK,CACrBkF,KAAM,CACFI,YAAatF,EAAMQ,QAAQ,OAkEpBT,CAAmBiH,ICxDnBpC,gBAbS,SAAAC,GACpB,MAAM,CACF7F,QAAS6F,EAAM7F,QACfC,QAAS4F,EAAMF,WAAW1F,QAC1B0C,UAAWkD,EAAMC,SAASnD,cAIP,SAAAD,GAAQ,MAAK,CACpCwF,QAAS,SAACvF,GAAD,OAAeD,EbWS,CACjChB,KAnB0B,iBAoB1BC,QAAS,CACLgB,Uad0CA,MAC9CS,YAAa,SAACT,GAAD,OAAeS,EAAYT,EAAWD,OAGxCkD,CAA6CoC,I,UCiBtDG,G,uKACQ,IACEnI,EAAYD,KAAKJ,MAAjBK,QACR,OACI,yBAAKI,UAAWJ,EAAQkG,MACpB,kBAACkC,EAAA,EAAD,CAAQhI,UAAWJ,EAAQkG,KAAMmC,SAAS,UACtC,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAD,CAAYnI,QAAQ,KAChBoI,QAAM,EACNnI,UAAWJ,EAAQwI,OAFvB,sBAKA,kBAACC,GAAA,EAAD,CAAMC,WAAS,EAACtI,UAAWJ,EAAQ2I,MAC/B,kBAAC,GAAD,CAAevI,UAAWJ,EAAQ4I,SAClC,kBAAC,GAAD,CAAiBxI,UAAWJ,EAAQ4I,SACpC,kBAAC,EAAD,CAAiBxI,UAAWJ,EAAQ4I,SACpC,kBAAC,EAAD,CAAWxI,UAAWJ,EAAQ4I,iB,GAhBrC/H,IAAMC,WAyBZC,gBAjDA,SAAAC,GAAK,MAAK,CACrBkF,KAAM,CACF2C,MAAO,OACPC,gBAAiB9H,EAAME,QAAQC,QAAQ4H,OAE3CJ,KAAM,CACFpH,WAAY,OACZ+E,YAAa,QAEjBkC,MAAO,CACHK,MAAO,MACPtC,aAAcvF,EAAMQ,QAAQ,GAC5BwH,YAAahI,EAAMQ,QAAQ,IAE/BoH,OAAQ,CACJP,SAAU,WACVY,aAAcjI,EAAMkI,MAAMD,aAC1B1C,aAAcvF,EAAMQ,QAAQ,GAC5BwH,YAAahI,EAAMQ,QAAQ,GAC3BD,WAAYP,EAAMQ,QAAQ,GAC1B8E,YAAatF,EAAMQ,QAAQ,OA6BpBT,CAAmBoH,ICnDnBvC,gBANS,SAACC,GAAD,MAAY,CAACA,YAEV,kBAAM,SAAAnD,GAAQ,MAAK,MAI/BkD,CAA6CuC,IC4BtDgB,G,4MACFC,SAAW,SAACC,GACR,OAAQA,GACJ,KAAK,EACD,OAAO,GACX,KAAK,GACD,OAAO,GACX,KAAK,GACD,OAAO,GACX,KAAK,GACD,OAAO,EACX,KAAK,GACD,OAAO,EACX,KAAK,IACD,OAAO,EACX,KAAK,IAEL,QACI,OAAO,I,uDAIT,IAAD,SAQDtJ,KAAKJ,MANLK,EAFC,EAEDA,QACAF,EAHC,EAGDA,MACAgC,EAJC,EAIDA,SACAE,EALC,EAKDA,OACAI,EANC,EAMDA,OACAF,EAPC,EAODA,MAEJ,OACI,yBAAK9B,UAAWJ,EAAQkG,MACpB,kBAACuC,GAAA,EAAD,CACIC,WAAS,EACTY,QAAQ,SACRC,WAAW,SACX/H,QAAS,EACTpB,UAAWJ,EAAQwJ,WAClB1J,GAASA,EAAMmD,OAASnD,EAAM+H,KAAI,SAACwB,EAAK/D,GACrC,OACI,yBACIlF,UACI4B,EAAOyH,SAASnE,GAAStF,EAAQ0J,mBAC7B5H,EAAS2H,SAASnE,GAAStF,EAAQ2J,qBAC/BvH,EAAOqH,SAASnE,GAAStF,EAAQ4J,mBAC7B1H,EAAMuH,SAASnE,GAAStF,EAAQ6J,sBAC5B7J,EAAQ8J,aAC5BC,MAAO,CACHlB,MAAM,GAAD,OAAK,EAAKO,SAAStJ,EAAMmD,QAAzB,MACL+G,OAAO,GAAD,OAAK,EAAIX,EAAT,OAEVjE,IAAKE,OAEZ,W,GAtDIzE,IAAMC,WA6DpBC,gBA/FA,SAAAC,GAAK,MAAK,CACrBkF,KAAM,CACF2C,MAAO,OACPR,SAAU,WACV4B,IAAK,MACLC,UAAW,mBACXC,QAASnJ,EAAMQ,QAAQ,GACvB4I,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,cAAe,UAEnBT,aAAc,CACVhB,gBAAiB9H,EAAME,QAAQC,QAAQ4H,MACvCxH,WAAY,OAEhBoI,qBAAsB,CAClBb,gBAAiB9H,EAAME,QAAQsJ,QAAQzB,MACvCxH,WAAY,OAEhBmI,mBAAoB,CAChBZ,gBAAiB9H,EAAME,QAAQuJ,MAAM1B,MACrCxH,WAAY,OAEhBqI,mBAAoB,CAChBd,gBAAiB9H,EAAME,QAAQwJ,QAAQ3B,MACvCxH,WAAY,OAEhBsI,sBAAuB,CACnBf,gBAAiB9H,EAAME,QAAQG,UAAU0H,MACzCxH,WAAY,UAiELR,CAAmBoI,IC9EnBvD,gBAhBS,SAAAC,GACpB,MAAO,CACH7F,QAAS6F,EAAM7F,QACfiH,kBAAmB5E,EAAqBwD,EAAMC,SAASC,gBACvDpD,UAAWkD,EAAMC,SAASnD,UAC1B7C,MAAO+F,EAAMF,WAAW7F,MACxBgC,SAAU+D,EAAMF,WAAW7D,SAC3BE,OAAQ6D,EAAMF,WAAW3D,OACzBI,OAAQyD,EAAMF,WAAWvD,OACzBF,MAAO2D,EAAMF,WAAWzD,UAIL,SAAAQ,GAAQ,MAAK,KAGzBkD,CAA6CuD,ICNtDwB,G,kLAGE5K,KAAKJ,MAAMyD,YAAYrD,KAAKJ,MAAMmG,SAASnD,a,+BAErC,IACE3C,EAAYD,KAAKJ,MAAjBK,QACR,OACI,yBAAKI,UAAWJ,EAAQ4K,SACpB,kBAAC,GAAD,MACA,yBAAKxK,UAAWJ,EAAQ6K,UACpB,kBAAC,GAAD,Y,GAXF/J,aAkBHC,gBA3BA,SAAAC,GAAK,MAAK,CACrB4J,QAAS,GAGTC,SAAU,MAuBC9J,CAAmB4J,ICrBnB/E,gBAPS,SAACC,GACrB,OAAQA,KAEe,kBAAM,SAAAnD,GAAQ,MAAK,CAC1CU,YAAa,SAAAT,GAAS,OAAIS,EAAYT,EAAWD,QAGtCkD,CAA6C+E,I,iBCTtDG,GAAe,CACjB7K,SAAS,EACTiC,MAAQ,GACRpC,MAAO,GACPgC,SAAU,GACVE,OAAQ,GACRI,OAAQ,IAyDG2I,GAtDU,WAAmC,IAAlClF,EAAiC,uDAAzBiF,GAAcE,EAAW,uCACvD,IAAKA,EAAOtJ,KACR,OAAOmE,EAEX,OAAQmF,EAAOtJ,MACX,IpBfiB,YoBejB,IACY5B,EAAUkL,EAAOrJ,QAAjB7B,MACR,OAAO,6BACA+F,GADP,IAEI/F,MAAOA,IAEf,IpBpBoB,eoBoBpB,IACYgC,EAAakJ,EAAOrJ,QAApBG,SACR,OAAO,6BACA+D,GADP,IAEI/D,SAAUA,IAElB,IpBzBmB,coByBnB,IACYE,EAAWgJ,EAAOrJ,QAAlBK,OACR,OAAO,6BACA6D,GADP,IAEI7D,OAAQA,IAEhB,IpB9BmB,coB8BnB,IACY/B,EAAY+K,EAAOrJ,QAAnB1B,QACR,OAAO,6BACA4F,GADP,IAEI5F,QAASA,IAEjB,IpBnCkB,aoBmClB,IACYmC,EAAW4I,EAAOrJ,QAAlBS,OACR,OAAO,6BACAyD,GADP,IAEIzD,OAAQA,IAEhB,IpBxCiB,YoBwCjB,IACYF,EAAU8I,EAAOrJ,QAAjBO,MACR,OAAO,6BACA2D,GADP,IAEI3D,MAAOA,IAEf,IpB5CuB,kBoB6CnB,OAAO,6BACA2D,GADP,IAEI/D,SAAU,GACVE,OAAQ,GACRI,OAAQ,GACRF,MAAO,KAEf,QACI,OAAO2D,IC3DbiF,GAAe,CACjBnI,UAAW,GACXoD,eAAgB,GAyBLkF,GAtBO,WAAmC,IAAlCpF,EAAiC,uDAAzBiF,GAAcE,EAAW,uCACpD,IAAInF,EACA,OAAOA,EAEX,OAAOmF,EAAOtJ,MACV,IrBZqB,gBqBYrB,IACYqE,EAAmBiF,EAAOrJ,QAA1BoE,eACR,OAAO,6BACAF,GADP,IAEIE,eAAgBA,IAExB,IrBXsB,iBqBWtB,IACYpD,EAAcqI,EAAOrJ,QAArBgB,UACR,OAAO,6BACAkD,GADP,IAEIlD,UAAWA,IAEnB,QACI,OAAOkD,ICnBJqF,GAFKC,2BAAgB,CAACrF,SAAUmF,GAAetF,WAAYoF,K,SCA3DK,0BAAYF,GAAaG,kCCExCC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,IACb,kBAAC,GAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.0b088c1b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport ArrowForwardIosSharpIcon from '@material-ui/icons/ArrowForwardIosSharp';\r\nimport { withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    runButton: {\r\n        color: theme.palette.primary.dark\r\n    },\r\n    runButtonDisabled: {\r\n        color: theme.palette.secondary.main\r\n    },\r\n    circularProgress: {\r\n        color: theme.palette.secondary.main,\r\n        marginLeft: theme.spacing(1)\r\n    },\r\n});\r\n\r\nclass RunButton extends React.Component {\r\n    handleClick = () => {\r\n        this.props.beginSort(this.props.selectedIndex, this.props.array);\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            running,\r\n        } = this.props;\r\n        return (\r\n            <div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={running ? classes.runButtonDisabled : classes.runButton}\r\n                    disabled={running}\r\n                    onClick={this.handleClick}\r\n                    endIcon={running ?\r\n                        <CircularProgress className={classes.circularProgress} size={20}></CircularProgress> :\r\n                        <ArrowForwardIosSharpIcon />\r\n                    }>{`Sort`}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RunButton);","export const SET_ALGORITHM = \"SET_ALGORITHM\";\r\nexport const SET_ARRAY = \"SET_ARRAY\";\r\nexport const SET_COMPARED = \"SET_COMPARED\";\r\nexport const SET_TO_SWAP = \"SET_TO_SWAP\";\r\nexport const SET_RUNNING = \"SET_RUNNING\";\r\nexport const SET_SORTED = \"SET_SORTED\";\r\nexport const SET_PIVOT = \"SET_PIVOT\";\r\nexport const SET_ARRAY_SIZE = \"SET_ARRAY_SIZE\";\r\nexport const RESET_META_DATA = \"RESET_META_DATA\";\r\n\r\n/** Settings Actions */\r\nexport const setAlgorithm = algorithmIndex => ({\r\n    type: SET_ALGORITHM,\r\n    payload: {\r\n        algorithmIndex:  algorithmIndex \r\n    }\r\n});\r\n\r\nexport const setRunning = running => ({\r\n    type: SET_RUNNING,\r\n    payload: {\r\n        running: running\r\n    }\r\n});\r\n\r\nexport const setArraySize = size => ({\r\n    type: SET_ARRAY_SIZE,\r\n    payload: {\r\n        arraySize: size\r\n    }\r\n})\r\n\r\n/** Sorting Actions */\r\nexport const resetMetaData = () => ({\r\n    type: RESET_META_DATA,\r\n    payload: {}\r\n})\r\nexport const setArray = array => ({\r\n    type: SET_ARRAY,\r\n    payload: {\r\n        array: array\r\n    }\r\n});\r\n\r\nexport const setCompared = compared => ({\r\n    type: SET_COMPARED,\r\n    payload: {\r\n        compared: compared\r\n    }\r\n});\r\n\r\nexport const setToSwap = toSwap => ({\r\n    type: SET_TO_SWAP,\r\n    payload: {\r\n        toSwap: toSwap\r\n    }\r\n});\r\n\r\nexport const setPivot = pivot => ({\r\n    type: SET_PIVOT,\r\n    payload: {\r\n        pivot: pivot\r\n    }\r\n})\r\n\r\nexport const setSorted = sorted => ({\r\n    type: SET_SORTED,\r\n    payload: {\r\n        sorted: sorted\r\n    }\r\n})","import { \r\n    setCompared, \r\n    setToSwap, \r\n    setRunning, \r\n    setPivot,\r\n    setArray,\r\n    resetMetaData } from '../store/actions';\r\n\r\nconst available_algorithms = [\r\n    'Bubble Sort',\r\n    'Merge Sort',\r\n    'Quick Sort',\r\n    'Insertion Sort',\r\n    'Heap Sort'\r\n]\r\n\r\nconst array_sizes = [5, 10, 25, 50, 75, 100, 150]\r\nconst sorting_animation_delays = [500, 250, 100, 50, 25, 0, 0]\r\n\r\nconst mapArraySizeToSpeed = (arraySize) => {\r\n    const idx = array_sizes.indexOf(arraySize);\r\n    return sorting_animation_delays[idx === -1? 2 : idx];\r\n}\r\n\r\nconst updateState = (trace, dispatch, arraySize) => {\r\n    const speed = mapArraySizeToSpeed(arraySize);\r\n    updateStateHelper(trace, dispatch, speed);\r\n};\r\n\r\nconst updateStateHelper = (trace, dispatch, speed) => {\r\n    if (!trace.length) {\r\n        dispatch(setCompared([]));\r\n        dispatch(setToSwap([]));\r\n        dispatch(setPivot([]));\r\n        dispatch(setRunning(false));\r\n        return;\r\n    }\r\n    dispatch(trace.shift());\r\n    setTimeout(() => {\r\n        updateStateHelper(trace, dispatch, speed)\r\n    }, speed)\r\n}\r\n\r\nconst createArray = (arraySize, dispatch) => {\r\n    let array = [];\r\n    while (array.length < arraySize) {\r\n        array.push(Math.floor(Math.random() * 200) + 5);\r\n    }\r\n    dispatch(setArray(array));\r\n    dispatch(resetMetaData());\r\n};\r\n\r\n\r\nexport { available_algorithms };\r\nexport { array_sizes };\r\nexport { createArray };\r\nexport { updateState };\r\n","import { setCompared, setToSwap, setArray, setSorted } from '../store/actions';\r\nimport { updateState } from './algorithm-util';\r\n\r\nconst bubbleSort = (array, dispatch) => {\r\n    const len = array.length;\r\n    // This is a trace of the algorithm\r\n    let trace = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    for (let i = 0; i < len - 1; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            trace.push(setCompared([j, j + 1]));\r\n            if (tempArray[j] > tempArray[j + 1]) {\r\n                trace.push(setToSwap([j, j + 1]));\r\n                let temp = tempArray[j];\r\n                tempArray[j] = tempArray[j + 1];\r\n                tempArray[j + 1] = temp;\r\n                trace.push(setArray(tempArray.slice(0)));\r\n                trace.push(setToSwap([]));\r\n            }\r\n        }\r\n        sorted.push(len-i-1);\r\n        trace.push(setSorted(sorted.slice()));\r\n    }\r\n    sorted.push(0);\r\n    trace.push(setSorted(sorted.slice()));\r\n    updateState(trace, dispatch, array.length);\r\n    return array;\r\n}\r\n\r\nexport default bubbleSort;","import { setArray, setSorted } from '../store/actions';\r\nimport { updateState } from './algorithm-util';\r\n\r\nconst merge = (arr1, arr2, startIdx, endIdx, trace, inPlaceObj, sorted) => {\r\n    let merged = [];\r\n    let shouldSetSorted = arr1.length + arr2.length === inPlaceObj.array.length;\r\n    let pass = 0;\r\n    while (arr1.length && arr2.length) {\r\n        if (arr1[0] < arr2[0]) {\r\n            merged.push(arr1.shift());\r\n        } else {\r\n            merged.push(arr2.shift());\r\n            inPlaceObj.array = inPlaceObj.array.slice(0, startIdx)\r\n                .concat(merged).concat(arr1).concat(arr2)\r\n                .concat(inPlaceObj.array.slice(endIdx + 1));\r\n                trace.push(setArray(inPlaceObj.array.slice()));\r\n        }\r\n        if(shouldSetSorted){\r\n            sorted.push(pass);\r\n            trace.push(setSorted(sorted.slice(0)));\r\n        }\r\n        pass++;\r\n    }\r\n    if(shouldSetSorted){\r\n        while(pass <= inPlaceObj.array.length){\r\n            sorted.push(pass);\r\n            trace.push(setSorted(sorted.slice(0)));\r\n            pass++;\r\n        }\r\n    }\r\n    return merged.concat(arr1.slice().concat(arr2.slice()));\r\n}\r\n\r\nconst mergeSort = (array, dispatch) => {\r\n    let trace = [];\r\n    let sorted = [];\r\n    mergeSortHelper(array, 0, array.length - 1, dispatch, trace, { array: array.slice() }, sorted);\r\n    updateState(trace, dispatch, array.length);\r\n}\r\n\r\n/**\r\n * Merge sort is NOT an in place sorting algorithm. \r\n * This implementation attempts to visualize the action of \r\n * merge sort on an array by applying intermediate steps of the sort to\r\n * the base array.\r\n * \r\n * Note: the inPlace array is nested within an object in order to maintain proper\r\n * references to it throughout the call stack\r\n * @param {} array \r\n * @param {} dispatch \r\n */\r\nconst mergeSortHelper = (array, startIdx, endIdx, dispatch, updates, inPlaceObj, sorted) => {\r\n    const len = array.length;\r\n    if (len <= 1) return array;\r\n    let mid = Math.floor(len / 2);\r\n    let inPlaceIndex = Math.floor((startIdx + endIdx + 1) / 2);\r\n    let left = mergeSortHelper(array.slice(0, mid), startIdx, inPlaceIndex - 1, dispatch, updates, inPlaceObj, sorted);\r\n    let right = mergeSortHelper(array.slice(mid), inPlaceIndex, endIdx, dispatch, updates, inPlaceObj, sorted);\r\n    return merge(left, right, startIdx, endIdx, updates, inPlaceObj, sorted);\r\n}\r\n\r\nexport default mergeSort\r\n\r\n\r\n","import { setArray, setPivot, setToSwap, setSorted } from '../store/actions';\r\nimport { updateState } from './algorithm-util';\r\n\r\nconst partition = (array, startIdx, endIdx, trace, sorted) => {\r\n    let i = startIdx - 1;\r\n    let j = endIdx + 1;\r\n    let pivot = startIdx;\r\n    trace.push(setPivot([pivot]));\r\n    while (true) {\r\n        i++;\r\n        while (array[i] < array[pivot]){\r\n            i++;\r\n        }\r\n        j--;\r\n        while (array[j] > array[pivot]){\r\n            j--;\r\n        }\r\n        if (i >= j) {\r\n            sorted.push(j);\r\n            trace.push(setSorted(sorted.slice(0)));\r\n            return j;\r\n        }\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        trace.push(setToSwap([i, j]));\r\n        trace.push(setArray(array.slice(0)));\r\n    }\r\n}\r\n\r\nconst quickSortHelper = (array, startIdx, endIdx, trace, sorted) => {\r\n    if (startIdx >= endIdx){\r\n        return;\r\n    }\r\n    let part = partition(array, startIdx, endIdx, trace, sorted);\r\n    quickSortHelper(array, startIdx, part, trace, sorted);\r\n    quickSortHelper(array, part + 1, endIdx, trace, sorted);\r\n}\r\n\r\nconst quickSort = (array, dispatch) => {\r\n    let trace = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    quickSortHelper(tempArray, 0, tempArray.length - 1, trace, sorted);\r\n    sorted.push(array.length-1);\r\n    trace.push(setSorted(sorted.slice(0)));\r\n    updateState(trace, dispatch, array.length);\r\n}\r\n\r\nexport default quickSort;","import { setArray, setCompared, setToSwap, setSorted } from '../store/actions';\r\nimport { updateState } from './algorithm-util';\r\n\r\n\r\nconst insertionSort = (array, dispatch) => {\r\n    let trace = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    const len = tempArray.length;\r\n    for(let i = 1; i < len; i++){\r\n        let key = tempArray[i];\r\n        let j = i-1;\r\n        trace.push(setCompared([j, i]));\r\n        while(j >= 0 && tempArray[j] > key){\r\n            trace.push(setToSwap([j, j+1]))\r\n            tempArray[j+1] = tempArray[j];\r\n            j--;\r\n            trace.push(setArray(tempArray.slice(0)));\r\n            trace.push(setCompared([j, j+1]));\r\n        }\r\n        tempArray[j+1] = key;\r\n        trace.push(setArray(tempArray.slice(0)));\r\n        sorted.push(i-1);\r\n        trace.push(setSorted(sorted.slice(0)));\r\n    }\r\n    sorted.push(len-1);\r\n    trace.push(setSorted(sorted.slice(0)));\r\n    updateState(trace, dispatch, array.length);\r\n    return tempArray;\r\n}\r\n\r\n\r\n\r\nexport default insertionSort;","import { updateState } from './algorithm-util';\r\nimport { setArray, setSorted, setToSwap } from '../store/actions';\r\n\r\n\r\nconst heapify = (array, len, index, sorted, trace) => {\r\n    let largest = index,\r\n        left = 2*index + 1,\r\n        right = 2*index + 2;\r\n\r\n    if (left < len && array[largest] < array[left]) {\r\n        largest = left;\r\n    }\r\n\r\n    if (right < len && array[largest] < array[right]) {\r\n        largest = right;\r\n    }\r\n\r\n    if (largest !== index) {\r\n        trace.push(setToSwap([index, largest]));\r\n        let temp = array[index];\r\n        array[index] = array[largest];\r\n        array[largest] = temp;\r\n        trace.push(setArray(array.slice(0)));\r\n        heapify(array, len, largest, sorted, trace);\r\n    }\r\n}\r\n\r\nconst heapSort = (arrayState, dispatch) => {\r\n    let array = arrayState.slice(0);\r\n    const len = array.length;\r\n    let sorted = [];\r\n    let trace = [];\r\n    // Build maxheap\r\n    for(let i = Math.floor(len/2) - 1; i >= 0; i--){\r\n        heapify(array, len, i, sorted, trace)\r\n    }\r\n    for(let i=len-1; i>0; i--){\r\n        trace.push(setToSwap([0, i]));\r\n        let temp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = temp;\r\n        sorted.push(i);\r\n        trace.push(setArray(array.slice(0)));\r\n        trace.push(setSorted(sorted.slice(0)));\r\n        heapify(array, i, 0, sorted, trace);\r\n    }\r\n    sorted.push(0);\r\n    trace.push(setSorted(sorted.slice(0)));\r\n    updateState(trace, dispatch, array.length);\r\n    return array;\r\n}\r\n\r\nexport default heapSort;","import { connect } from 'react-redux';\r\nimport RunButton from './run-button';\r\nimport { setRunning, resetMetaData } from '../../../store/actions';\r\nimport  bubbleSort from '../../../algorithms/bubble-sort';\r\nimport mergeSort from '../../../algorithms/merge-sort';\r\nimport quickSort from '../../../algorithms/quick-sort';\r\nimport insertionSort from '../../../algorithms/insertion_sort';\r\nimport heapSort from '../../../algorithms/heap_sort';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        selectedIndex: state.settings.algorithmIndex,\r\n        running: state.arrayState.running,\r\n        array: state.arrayState.array,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    beginSort: (algorithmIndex, array) => {\r\n        dispatch(setRunning(true));\r\n        dispatch(resetMetaData());\r\n        switch(algorithmIndex){\r\n            case 0:\r\n                bubbleSort(array, dispatch);\r\n                return;\r\n            case 1:\r\n                mergeSort(array, dispatch);\r\n                return;\r\n            case 2:\r\n                quickSort(array, dispatch);\r\n                return;\r\n            case 3:\r\n                insertionSort(array, dispatch);\r\n                return;\r\n            case 4:\r\n                heapSort(array, dispatch);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RunButton);","import React from 'react';\r\nimport { withStyles } from '@material-ui/core';\r\nimport LoopSharpIcon from '@material-ui/icons/LoopSharp';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    randomizeButton: {\r\n        paddingRight: '10px',\r\n    },\r\n    randomizeButtonDisabled: {\r\n        paddingRight: '10px',\r\n    },\r\n});\r\n\r\n\r\nclass RandomizeButton extends React.Component {\r\n    handleClick = () => {\r\n        this.props.randomizeArray(this.props.array.length);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            running\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    className={running? classes.randomizeButtonDisabled : classes.randomizeButton}\r\n                    disabled={running}\r\n                    onClick={this.handleClick}\r\n                    startIcon={<LoopSharpIcon/>}\r\n                    >{`Randomize`}\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RandomizeButton);\r\n\r\n","import { connect } from 'react-redux';\r\nimport { createArray } from '../../../algorithms/algorithm-util';\r\nimport randomizeButton from './randomize-button';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        array: state.arrayState.array,\r\n        running: state.arrayState.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    randomizeArray: (length) => {\r\n        createArray(length, dispatch);\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(randomizeButton);","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Menu, MenuItem, Button } from \"@material-ui/core\";\r\nimport ArrowDropDownSharpIcon from '@material-ui/icons/ArrowDropDownSharp';\r\nimport { available_algorithms } from '../../../algorithms/algorithm-util';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n});\r\n\r\nclass SortingSelect extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            anchorEl: null\r\n        }\r\n    }\r\n    openMenu = (event) => {\r\n        this.setState({\r\n            anchorEl: event.currentTarget\r\n        });\r\n    }\r\n    handleAlgorithmSelection = (index) => {\r\n        this.props.setAlgorithm(index);\r\n        this.setState({\r\n            anchorEl: null\r\n        });\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            anchorEl: null\r\n        })\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            selectedAlgorithm,\r\n            running\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Button \r\n                    variant=\"outlined\"\r\n                    disabled={running} \r\n                    onClick={this.openMenu}\r\n                    endIcon={<ArrowDropDownSharpIcon />}>\r\n                    {selectedAlgorithm}\r\n                </Button>\r\n                <Menu\r\n                    id=\"algorithm-select-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    getContentAnchorEl={null}\r\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\"}}\r\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {available_algorithms.map((algo, index) => (\r\n                        <MenuItem\r\n                            key={algo}\r\n                            onClick={() => this.handleAlgorithmSelection(index)}\r\n                        >{algo}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(SortingSelect);","import { available_algorithms } from '../../../algorithms/algorithm-util';\r\nimport { connect } from 'react-redux';\r\nimport SortingSelect from './sorting-select';\r\nimport { setAlgorithm } from '../../../store/actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        selectedAlgorithm: available_algorithms[state.settings.algorithmIndex],\r\n        running: state.arrayState.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setAlgorithm: index => dispatch(setAlgorithm(index)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingSelect);","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Menu, MenuItem, Button } from \"@material-ui/core\";\r\nimport ArrowDropDownSharpIcon from '@material-ui/icons/ArrowDropDownSharp';\r\nimport { array_sizes } from '../../../algorithms/algorithm-util';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n});\r\n\r\nclass ArraySizeSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            anchorEl: null\r\n        }\r\n    }\r\n\r\n    openMenu = (event) => {\r\n        this.setState({\r\n            anchorEl: event.currentTarget\r\n        });\r\n    }\r\n    handleArraySizeSelection = (size) => {\r\n        this.props.setSize(size);\r\n        this.props.createArray(size);\r\n        this.setState({\r\n            anchorEl: null\r\n        });\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            anchorEl: null\r\n        })\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            running,\r\n            arraySize\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    disabled={running}\r\n                    onClick={this.openMenu}\r\n                    endIcon={<ArrowDropDownSharpIcon />}>\r\n                    {`Array size: ${arraySize}`}\r\n                </Button>\r\n                <Menu\r\n                    id=\"algorithm-select-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    getContentAnchorEl={null}\r\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {array_sizes.map(size => (\r\n                        <MenuItem\r\n                            key={size}\r\n                            onClick={() => this.handleArraySizeSelection(size)}\r\n                        >{size}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ArraySizeSelect);","import { connect } from 'react-redux';\r\nimport ArraySizeSelect from './array-size-select';\r\nimport { createArray } from '../../../algorithms/algorithm-util';\r\nimport { setArraySize } from '../../../store/actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        running: state.arrayState.running,\r\n        arraySize: state.settings.arraySize\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setSize: (arraySize) => dispatch(setArraySize(arraySize)),\r\n    createArray: (arraySize) => createArray(arraySize, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArraySizeSelect);","import React from \"react\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport RunButton from './run-button/run-button-container';\r\nimport RandomizeButton from './randomize-button/randomize-button-container';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport SortingSelect from \"./sorting-select/sorting-select-container\";\r\nimport ArraySizeSelect from \"./array-size-select/array-size-select-container\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.primary.light\r\n    },\r\n    grid: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n    title: {\r\n        width: '50%',\r\n        paddingRight: theme.spacing(4),\r\n        paddingLeft: theme.spacing(4)\r\n    },\r\n    button: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        paddingRight: theme.spacing(2),\r\n        paddingLeft: theme.spacing(2),\r\n        marginLeft: theme.spacing(2),\r\n        marginRight: theme.spacing(2)\r\n    }\r\n});\r\n\r\nclass TopBar extends React.Component {\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar className={classes.root} position=\"static\">\r\n                    <ToolBar>\r\n                        <Typography variant=\"h3\"\r\n                            noWrap\r\n                            className={classes.title}> \r\n                            Sorting Visualizer\r\n                        </Typography>\r\n                        <Grid container className={classes.grid}>\r\n                            <SortingSelect className={classes.button}></SortingSelect>\r\n                            <ArraySizeSelect className={classes.button}></ArraySizeSelect>\r\n                            <RandomizeButton className={classes.button}></RandomizeButton>\r\n                            <RunButton className={classes.button}></RunButton>\r\n                        </Grid>\r\n                    </ToolBar>\r\n                </AppBar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(TopBar);","import { connect } from \"react-redux\";\r\nimport TopBar from './top-bar';\r\n\r\nconst mapStateToProps = (state) => ({state});\r\n\r\nconst mapDispatchToProps = () => dispatch => ({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);","import React from 'react';\r\nimport { withStyles, Grid } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        transform: 'translateY(-50%)',\r\n        padding: theme.spacing(2),\r\n        flex: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyConent: 'center'\r\n    },\r\n    arrayElement: {\r\n        backgroundColor: theme.palette.primary.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementCompared: {\r\n        backgroundColor: theme.palette.warning.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementToSwap: {\r\n        backgroundColor: theme.palette.error.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementSorted: {\r\n        backgroundColor: theme.palette.success.light,\r\n        marginLeft: '3px'\r\n    },\r\n    arrayElementPartition: {\r\n        backgroundColor: theme.palette.secondary.light,\r\n        marginLeft: '3px'\r\n    }\r\n})\r\n\r\nclass VisualizerBody extends React.Component {\r\n    getWidth = (num) => {\r\n        switch (num) {\r\n            case 5:\r\n                return 40;\r\n            case 10:\r\n                return 20;\r\n            case 25:\r\n                return 10;\r\n            case 50:\r\n                return 9;\r\n            case 75:\r\n                return 8;\r\n            case 100:\r\n                return 6;\r\n            case 150:\r\n                return 5;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            array,\r\n            compared,\r\n            toSwap,\r\n            sorted,\r\n            pivot,\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                    className={classes.arrayBody}>\r\n                    {array && array.length ? array.map((num, index) => {\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    toSwap.includes(index) ? classes.arrayElementToSwap :\r\n                                        compared.includes(index) ? classes.arrayElementCompared :\r\n                                            sorted.includes(index) ? classes.arrayElementSorted :\r\n                                                pivot.includes(index) ? classes.arrayElementPartition :\r\n                                                    classes.arrayElement}\r\n                                style={{\r\n                                    width: `${this.getWidth(array.length)}px`,\r\n                                    height: `${2 * num}px`\r\n                                }}\r\n                                key={index}></div>\r\n                        )\r\n                    }) : null}\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(VisualizerBody)","import { available_algorithms } from '../../algorithms/algorithm-util';\r\nimport { connect } from 'react-redux';\r\nimport VisualizerBody from './visualizer-body';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        classes: state.classes,\r\n        selectedAlgorithm: available_algorithms[state.settings.algorithmIndex],\r\n        arraySize: state.settings.arraySize,\r\n        array: state.arrayState.array,\r\n        compared: state.arrayState.compared,\r\n        toSwap: state.arrayState.toSwap,\r\n        sorted: state.arrayState.sorted,\r\n        pivot: state.arrayState.pivot\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerBody);","import React, { Component } from \"react\";\r\nimport TopBar from \"./top-bar/top-bar-container\";\r\nimport VisualizerBody from \"./visualizer-body/visualizer-body-container\";\r\nimport { withStyles } from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n    appRoot: {\r\n\r\n    },\r\n    bodyRoot: {\r\n\r\n    }\r\n})\r\n\r\nclass App extends Component {\r\n    // Create initial array\r\n    componentDidMount() {\r\n        this.props.createArray(this.props.settings.arraySize);\r\n    }\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.appRoot}>\r\n                <TopBar></TopBar>\r\n                <div className={classes.bodyRoot}>\r\n                    <VisualizerBody></VisualizerBody>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);","import { connect } from \"react-redux\";\r\nimport App from './app';\r\nimport { createArray } from \"../algorithms/algorithm-util\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return (state)\r\n};\r\nconst mapDispatchToProps = () => dispatch => ({\r\n    createArray: arraySize => createArray(arraySize, dispatch)\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SET_COMPARED, SET_TO_SWAP, SET_ARRAY, SET_RUNNING, SET_SORTED, RESET_META_DATA, SET_PIVOT } from '../actions';\r\n\r\nconst initialState = {\r\n    running: false,\r\n    pivot : [],\r\n    array: [],\r\n    compared: [],\r\n    toSwap: [],\r\n    sorted: []\r\n}\r\n\r\nconst algorithmReducer = (state = initialState, action) => {\r\n    if (!action.type) {\r\n        return state\r\n    }\r\n    switch (action.type) {\r\n        case SET_ARRAY:\r\n            const { array } = action.payload;\r\n            return {\r\n                ...state,\r\n                array: array\r\n            }\r\n        case SET_COMPARED:\r\n            const { compared } = action.payload;\r\n            return {\r\n                ...state,\r\n                compared: compared\r\n            }\r\n        case SET_TO_SWAP:\r\n            const { toSwap } = action.payload;\r\n            return {\r\n                ...state,\r\n                toSwap: toSwap\r\n            }\r\n        case SET_RUNNING:\r\n            const { running } = action.payload;\r\n            return {\r\n                ...state,\r\n                running: running\r\n            }\r\n        case SET_SORTED:\r\n            const { sorted } = action.payload;\r\n            return {\r\n                ...state,\r\n                sorted: sorted\r\n            }\r\n        case SET_PIVOT:\r\n            const { pivot } = action.payload;\r\n            return {\r\n                ...state,\r\n                pivot: pivot\r\n            }\r\n        case RESET_META_DATA:\r\n            return {\r\n                ...state,\r\n                compared: [],\r\n                toSwap: [],\r\n                sorted: [],\r\n                pivot: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default algorithmReducer;","import { SET_ALGORITHM, SET_ARRAY_SIZE } from '../actions';\r\n\r\nconst initialState = {\r\n    arraySize: 10,\r\n    algorithmIndex: 0\r\n};\r\n\r\nconst topBarReducer = (state = initialState, action) => {\r\n    if(!state){\r\n        return state;\r\n    }\r\n    switch(action.type) {\r\n        case SET_ALGORITHM:\r\n            const { algorithmIndex } = action.payload;\r\n            return {\r\n                ...state,\r\n                algorithmIndex: algorithmIndex\r\n            }\r\n        case SET_ARRAY_SIZE:\r\n            const { arraySize } = action.payload;\r\n            return {\r\n                ...state,\r\n                arraySize: arraySize\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default topBarReducer;\r\n","import algorithmReducer from \"./algorithm-reducer\";\r\nimport topBarReducer from \"./top-bar-reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({settings: topBarReducer, arrayState: algorithmReducer});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/root-reducer.js\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport default createStore(rootReducer, composeWithDevTools());","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/app-container.js';\r\nimport store from './store/store.js';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}