{"version":3,"sources":["components/top-bar/run-button/run-button.jsx","store/actions.js","algorithms/algorithms.js","algorithms/bubble-sort.js","algorithms/merge-sort.js","algorithms/quick-sort.js","components/top-bar/run-button/run-button-container.js","components/top-bar/sorting-select/sorting-select.jsx","components/top-bar/sorting-select/sorting-select-container.js","components/top-bar/array-size-select/array-size-select.jsx","components/top-bar/array-size-select/array-size-select-container.js","components/top-bar/top-bar.jsx","components/top-bar/top-bar-container.js","components/visualizer-body/visualizer-body.jsx","components/visualizer-body/visualizer-body-container.js","components/app.jsx","components/app-container.js","store/reducers/algorithm-reducer.js","store/reducers/top-bar-reducer.js","store/reducers/root-reducer.js","store/store.js","index.js"],"names":["RunButton","handleClick","props","beginSort","selectedIndex","array","this","classes","running","Button","variant","className","runButtonDisabled","runButton","disabled","onClick","CircularProgress","circularProgress","size","arrowIcon","React","Component","withStyles","theme","paddingRight","color","palette","primary","dark","secondary","main","marginLeft","spacing","paddingLeft","setRunning","type","payload","setArray","setCompared","compared","setToSwap","toSwap","setPivot","pivot","setSorted","sorted","available_algorithms","array_sizes","updateState","updates","dispatch","length","shift","setTimeout","bubbleSort","a","len","tempArray","slice","push","i","j","temp","mergeSortHelper","startIdx","endIdx","inPlaceObj","mid","Math","floor","inPlaceIndex","arr1","arr2","merged","concat","merge","mergeSort","quickSortHelper","part","partition","quickSort","connect","state","settings","algorithmIndex","arrayState","SortingSelect","openMenu","event","setState","anchorEl","currentTarget","handleAlgorithmSelection","index","setAlgorithm","handleClose","selectedAlgorithm","selectionButton","aria-controls","aria-haspopup","Menu","id","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","Boolean","onClose","map","algo","MenuItem","key","minWidth","ArraySizeSelect","handleArraySizeSelection","createArray","arraySizeSelected","initialArraySize","arraySize","random","TopBar","root","AppBar","position","Typography","noWrap","title","Grid","container","grid","dropdownButton","width","backgroundColor","light","marginRight","borderRadius","shape","VisualizerBody","getWidth","num","justify","alignItems","arrayBody","includes","arrayElementToSwap","arrayElementCompared","arrayElementSorted","arrayElementPartition","arrayElement","style","height","top","transform","padding","flex","display","flexDirection","justifyConent","warning","error","success","App","appRoot","bodyRoot","initialState","algorithmReducer","action","topBarReducer","rootReducer","combineReducers","createStore","composeWithDevTools","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.f64fab38.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport ArrowForwardIosSharpIcon from '@material-ui/icons/ArrowForwardIosSharp';\r\nimport { withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    runButton: {\r\n        paddingRight: '10px',\r\n        color: theme.palette.primary.dark\r\n    },\r\n    runButtonDisabled: {\r\n        paddingRight: '10px',\r\n        color: theme.palette.secondary.main\r\n    },\r\n    circularProgress: {        \r\n        color: theme.palette.secondary.main,\r\n        marginLeft: theme.spacing(1)\r\n    },\r\n    arrowIcon: {\r\n        paddingLeft: theme.spacing(1)\r\n    }\r\n});\r\n\r\nclass RunButton extends React.Component {\r\n    handleClick = () => {\r\n        this.props.beginSort(this.props.selectedIndex, this.props.array);\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            running,\r\n        } = this.props;\r\n        return (\r\n            <div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={running? classes.runButtonDisabled : classes.runButton}\r\n                    disabled={running}\r\n                    onClick={this.handleClick}>{`Sort`}\r\n                    {running?\r\n                        <CircularProgress className={classes.circularProgress} size={20}></CircularProgress> :\r\n                        <ArrowForwardIosSharpIcon className={classes.arrowIcon}></ArrowForwardIosSharpIcon>\r\n                }\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RunButton);","export const SET_ALGORITHM = \"SET_ALGORITHM\";\r\nexport const SET_ARRAY = \"SET_ARRAY\";\r\nexport const SET_COMPARED = \"SET_COMPARED\";\r\nexport const SET_TO_SWAP = \"SET_TO_SWAP\";\r\nexport const SET_RUNNING = \"SET_RUNNING\";\r\nexport const SET_SORTED = \"SET_SORTED\";\r\nexport const SET_PIVOT = \"SET_PIVOT\";\r\nexport const RESET_META_DATA = \"RESET_META_DATA\";\r\n\r\n/** Settings Actions */\r\nexport const setAlgorithm = algorithmIndex => ({\r\n    type: SET_ALGORITHM,\r\n    payload: {\r\n        algorithmIndex:  algorithmIndex \r\n    }\r\n});\r\n\r\nexport const setRunning = running => ({\r\n    type: SET_RUNNING,\r\n    payload: {\r\n        running: running\r\n    }\r\n});\r\n\r\n/** Sorting Actions */\r\nexport const resetMetaData = () => ({\r\n    type: RESET_META_DATA,\r\n    payload: {}\r\n})\r\nexport const setArray = array => ({\r\n    type: SET_ARRAY,\r\n    payload: {\r\n        array: array\r\n    }\r\n});\r\n\r\nexport const setCompared = compared => ({\r\n    type: SET_COMPARED,\r\n    payload: {\r\n        compared: compared\r\n    }\r\n});\r\n\r\nexport const setToSwap = toSwap => ({\r\n    type: SET_TO_SWAP,\r\n    payload: {\r\n        toSwap: toSwap\r\n    }\r\n});\r\n\r\nexport const setPivot = pivot => ({\r\n    type: SET_PIVOT,\r\n    payload: {\r\n        pivot: pivot\r\n    }\r\n})\r\n\r\nexport const setSorted = sorted => ({\r\n    type: SET_SORTED,\r\n    payload: {\r\n        sorted: sorted\r\n    }\r\n})","import { setCompared, setToSwap, setRunning, setPivot, resetMetaData } from '../store/actions';\r\n\r\nconst available_algorithms = [\r\n    'Bubble Sort',\r\n    'Merge Sort',\r\n    'Quick Sort',\r\n]\r\n\r\nconst array_sizes = [5, 10, 25, 50, 75, 100, 150]\r\n\r\nconst updateState = (updates, dispatch) => {\r\n    if (!updates.length) {\r\n        dispatch(setCompared([]));\r\n        dispatch(setToSwap([]));\r\n        dispatch(setPivot([]));\r\n        dispatch(setRunning(false));\r\n        return;\r\n    }\r\n    dispatch(updates.shift());\r\n    setTimeout(() => {\r\n        updateState(updates, dispatch)\r\n    }, 5)\r\n}\r\n\r\n\r\nexport {available_algorithms};\r\nexport {array_sizes};\r\nexport default updateState;\r\n","import { setCompared, setToSwap, setArray, setSorted, resetMetaData } from '../store/actions';\r\nimport updateState from '../algorithms/algorithms';\r\n\r\nconst bubbleSort = async (array, dispatch) => {\r\n    const len = array.length;\r\n    // This is a trace of the algorithm\r\n    let updates = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    updates.push(resetMetaData());\r\n    for (let i = 0; i < len - 1; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            updates.push(setCompared([j, j + 1]));\r\n            if (tempArray[j] > tempArray[j + 1]) {\r\n                updates.push(setToSwap([j, j + 1]));\r\n                let temp = tempArray[j];\r\n                tempArray[j] = tempArray[j + 1];\r\n                tempArray[j + 1] = temp;\r\n            }\r\n            updates.push(setArray(tempArray.slice(0)));\r\n            updates.push(setToSwap([]));\r\n        }\r\n        sorted.push(len-i-1);\r\n        updates.push(setSorted(sorted.slice()));\r\n    }\r\n    sorted.push(0);\r\n    updates.push(setSorted(sorted.slice()));\r\n    updateState(updates, dispatch);\r\n    return array;\r\n}\r\n\r\nexport default bubbleSort;","import { setArray } from '../store/actions';\r\nimport updateState from './algorithms';\r\n\r\nconst merge = (arr1, arr2, startIdx, endIdx, updates, inPlaceObj) => {\r\n    let merged = [];\r\n    while (arr1.length && arr2.length) {\r\n        if (arr1[0] < arr2[0]) {\r\n            merged.push(arr1.shift());\r\n        } else {\r\n            merged.push(arr2.shift());\r\n            inPlaceObj.array = inPlaceObj.array.slice(0, startIdx)\r\n                .concat(merged).concat(arr1).concat(arr2)\r\n                .concat(inPlaceObj.array.slice(endIdx + 1));\r\n            updates.push(setArray(inPlaceObj.array.slice()));\r\n        }\r\n    }\r\n    return merged.concat(arr1.slice().concat(arr2.slice()));\r\n}\r\n\r\nconst mergeSort = (array, dispatch) => {\r\n    let updates = [];\r\n    mergeSortHelper(array, 0, array.length - 1, dispatch, updates, { array: array.slice() });\r\n    updateState(updates, dispatch);\r\n}\r\n\r\n/**\r\n * Merge sort is NOT an in place sorting algorithm. \r\n * This implementation attempts to visualize the action of \r\n * merge sort on an array by applying intermediate steps of the sort to\r\n * the base array.\r\n * \r\n * Note: the inPlace array is nested within an object in order to maintain proper\r\n * references to it throughout the call stack\r\n * @param {} array \r\n * @param {} dispatch \r\n */\r\nconst mergeSortHelper = (array, startIdx, endIdx, dispatch, updates, inPlaceObj) => {\r\n    const len = array.length;\r\n    if (len <= 1) return array;\r\n    let mid = Math.floor(len / 2);\r\n    let inPlaceIndex = Math.floor((startIdx + endIdx + 1) / 2);\r\n    let left = mergeSortHelper(array.slice(0, mid), startIdx, inPlaceIndex - 1, dispatch, updates, inPlaceObj);\r\n    let right = mergeSortHelper(array.slice(mid), inPlaceIndex, endIdx, dispatch, updates, inPlaceObj);\r\n    return merge(left, right, startIdx, endIdx, updates, inPlaceObj);\r\n}\r\n\r\nexport default mergeSort\r\n\r\n\r\n","import { setArray, setCompared, setPivot, setToSwap, setSorted } from '../store/actions';\r\nimport updateState from './algorithms';\r\n\r\nconst partition = (array, startIdx, endIdx, updates, sorted) => {\r\n    let i = startIdx - 1;\r\n    let j = endIdx + 1;\r\n    let pivot = startIdx;\r\n    updates.push(setPivot([pivot]));\r\n    while (true) {\r\n        i++;\r\n        while (array[i] < array[pivot]){\r\n            i++;\r\n        }\r\n        j--;\r\n        while (array[j] > array[pivot]){\r\n            j--;\r\n        }\r\n        if (i >= j) {\r\n            sorted.push(j);\r\n            updates.push(setSorted(sorted.slice(0)));\r\n            return j;\r\n        }\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        updates.push(setToSwap([i, j]));\r\n        updates.push(setArray(array.slice(0)));\r\n    }\r\n}\r\n\r\nconst quickSortHelper = (array, startIdx, endIdx, updates, sorted) => {\r\n    if (startIdx >= endIdx){\r\n        return;\r\n    }\r\n    let part = partition(array, startIdx, endIdx, updates, sorted);\r\n    quickSortHelper(array, startIdx, part, updates, sorted);\r\n    quickSortHelper(array, part + 1, endIdx, updates, sorted);\r\n}\r\n\r\nconst quickSort = (array, dispatch) => {\r\n    let updates = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    quickSortHelper(tempArray, 0, tempArray.length - 1, updates, sorted);\r\n    sorted.push(array.length-1);\r\n    updates.push(setSorted(sorted.slice(0)));\r\n    updateState(updates, dispatch);\r\n}\r\n\r\nexport default quickSort;","import { connect } from 'react-redux';\r\nimport RunButton from './run-button';\r\nimport { setRunning, resetMetaData } from '../../../store/actions';\r\nimport  bubbleSort from '../../../algorithms/bubble-sort';\r\nimport mergeSort from '../../../algorithms/merge-sort';\r\nimport quickSort from '../../../algorithms/quick-sort';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        selectedIndex: state.settings.algorithmIndex,\r\n        running: state.arrayState.running,\r\n        array: state.arrayState.array\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    beginSort: (algorithmIndex, array) => {\r\n        dispatch(setRunning(true));\r\n        dispatch(resetMetaData());\r\n        switch(algorithmIndex){\r\n            case 0:\r\n                bubbleSort(array, dispatch);\r\n                return;\r\n            case 1:\r\n                mergeSort(array, dispatch);\r\n                return;\r\n            case 2:\r\n                quickSort(array, dispatch);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RunButton);","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Menu, MenuItem, Button } from \"@material-ui/core\";\r\nimport ArrowDropDownSharpIcon from '@material-ui/icons/ArrowDropDownSharp';\r\nimport { available_algorithms } from '../../../algorithms/algorithms';\r\n\r\nconst styles = theme => ({\r\n    selectionButton: {\r\n        minWidth: 120,\r\n    },\r\n});\r\n\r\nclass SortingSelect extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            anchorEl: null\r\n        }\r\n    }\r\n    openMenu = (event) => {\r\n        this.setState({\r\n            anchorEl: event.currentTarget\r\n        });\r\n    }\r\n    handleAlgorithmSelection = (index) => {\r\n        this.props.setAlgorithm(index);\r\n        this.setState({\r\n            anchorEl: null\r\n        });\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            anchorEl: null\r\n        })\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            selectedAlgorithm,\r\n            running\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.selectionButton}>\r\n                <Button \r\n                    aria-controls=\"algorithm-select\" \r\n                    aria-haspopup=\"true\"\r\n                    disabled={running} \r\n                    onClick={this.openMenu}>\r\n                    {selectedAlgorithm}\r\n                    <ArrowDropDownSharpIcon></ArrowDropDownSharpIcon>\r\n                </Button>\r\n                <Menu\r\n                    id=\"algorithm-select-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    getContentAnchorEl={null}\r\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\"}}\r\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {available_algorithms.map((algo, index) => (\r\n                        <MenuItem\r\n                            key={algo}\r\n                            onClick={() => this.handleAlgorithmSelection(index)}\r\n                        >{algo}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(SortingSelect);","import { available_algorithms } from '../../../algorithms/algorithms.js';\r\nimport { connect } from 'react-redux';\r\nimport SortingSelect from './sorting-select';\r\nimport { setAlgorithm } from '../../../store/actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        selectedAlgorithm: available_algorithms[state.settings.algorithmIndex],\r\n        running: state.arrayState.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setAlgorithm: index => dispatch(setAlgorithm(index)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingSelect);","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Menu, MenuItem, Button } from \"@material-ui/core\";\r\nimport ArrowDropDownSharpIcon from '@material-ui/icons/ArrowDropDownSharp';\r\nimport { array_sizes } from '../../../algorithms/algorithms';\r\n\r\nconst styles = theme => ({\r\n    selectionButton: {\r\n        minWidth: 120,\r\n    },\r\n});\r\n\r\nclass ArraySizeSelect extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            arraySizeSelected: this.props.initialArraySize,\r\n            anchorEl: null\r\n        }\r\n    }\r\n\r\n    openMenu = (event) => {\r\n        this.setState({\r\n            anchorEl: event.currentTarget\r\n        });\r\n    }\r\n    handleArraySizeSelection = (size) => {\r\n        this.props.createArray(size);\r\n        this.setState({\r\n            arraySizeSelected: size,\r\n            anchorEl: null\r\n        });\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            anchorEl: null\r\n        })\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            running\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.selectionButton}>\r\n                <Button \r\n                    aria-controls=\"array-size-select\" \r\n                    aria-haspopup=\"true\"\r\n                    disabled={running} \r\n                    onClick={this.openMenu}>\r\n                    {`Array size: ${this.state.arraySizeSelected}`}\r\n                    <ArrowDropDownSharpIcon></ArrowDropDownSharpIcon>\r\n                </Button>\r\n                <Menu\r\n                    id=\"algorithm-select-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    getContentAnchorEl={null}\r\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\"}}\r\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {array_sizes.map(size => (\r\n                        <MenuItem\r\n                            key={size}\r\n                            onClick={() => this.handleArraySizeSelection(size)}\r\n                        >{size}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ArraySizeSelect);","import { connect } from 'react-redux';\r\nimport ArraySizeSelect from './array-size-select';\r\nimport { setArray, resetMetaData } from '../../../store/actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        initialArraySize: state.settings.initialArraySize,\r\n        running: state.arrayState.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    createArray: arraySize => {\r\n        let array = [];\r\n        while (array.length < arraySize) {\r\n            array.push(Math.floor(Math.random() * 200) + 5);\r\n        }\r\n        dispatch(setArray(array));\r\n        dispatch(resetMetaData());\r\n    },\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArraySizeSelect);","import React from \"react\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport RunButton from './run-button/run-button-container';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport SortingSelect from \"./sorting-select/sorting-select-container\";\r\nimport ArraySizeSelect from \"./array-size-select/array-size-select-container\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.primary.light\r\n    },\r\n    grid: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n    title: {\r\n        width: '60%',\r\n        paddingRight: theme.spacing(4),\r\n        paddingLeft: theme.spacing(4)\r\n    },\r\n    dropdownButton: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        paddingRight: theme.spacing(4),\r\n    },\r\n    runButton: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        paddingRight: theme.spacing(4),\r\n        paddingLeft: theme.spacing(4),\r\n        marginLeft: theme.spacing(4)\r\n    }\r\n});\r\n\r\nclass TopBar extends React.Component {\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar className={classes.root} position=\"static\">\r\n                    <ToolBar>\r\n                        <Typography variant=\"h3\"\r\n                            noWrap\r\n                            className={classes.title}> \r\n                            Sorting Visualizer\r\n                        </Typography>\r\n                        <Grid container className={classes.grid}>\r\n                            <SortingSelect className={classes.dropdownButton}></SortingSelect>\r\n                            <ArraySizeSelect className={classes.dropdownButton}></ArraySizeSelect>\r\n                            <RunButton className={classes.runButton}></RunButton>\r\n                        </Grid>\r\n                    </ToolBar>\r\n                </AppBar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(TopBar);","import { connect } from \"react-redux\";\r\nimport TopBar from './top-bar';\r\n\r\nconst mapStateToProps = (state) => ({state});\r\n\r\nconst mapDispatchToProps = () => dispatch => ({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);","import React from 'react';\r\nimport { withStyles, Grid } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        transform: 'translateY(-50%)',\r\n        padding: theme.spacing(2),\r\n        flex: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyConent: 'center'\r\n    },\r\n    arrayElement: {\r\n        backgroundColor: theme.palette.primary.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementCompared: {\r\n        backgroundColor: theme.palette.warning.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementToSwap: {\r\n        backgroundColor: theme.palette.error.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementSorted: {\r\n        backgroundColor: theme.palette.success.light,\r\n        marginLeft: '3px'\r\n    },\r\n    arrayElementPartition: {\r\n        backgroundColor: theme.palette.secondary.light,\r\n        marginLeft: '3px'\r\n    }\r\n})\r\n\r\nclass VisualizerBody extends React.Component {\r\n    getWidth = (num) => {\r\n        switch (num) {\r\n            case 5:\r\n                return 40;\r\n            case 10:\r\n                return 20;\r\n            case 25:\r\n                return 10;\r\n            case 50:\r\n                return 9;\r\n            case 75:\r\n                return 8;\r\n            case 100:\r\n                return 6;\r\n            case 150:\r\n                return 5;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            array,\r\n            compared,\r\n            toSwap,\r\n            sorted,\r\n            pivot,\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                    className={classes.arrayBody}>\r\n                    {array && array.length ? array.map((num, index) => {\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    toSwap.includes(index) ? classes.arrayElementToSwap :\r\n                                        compared.includes(index) ? classes.arrayElementCompared :\r\n                                            sorted.includes(index) ? classes.arrayElementSorted :\r\n                                                pivot.includes(index) ? classes.arrayElementPartition :\r\n                                                    classes.arrayElement}\r\n                                style={{\r\n                                    width: `${this.getWidth(array.length)}px`,\r\n                                    height: `${2 * num}px`\r\n                                }}\r\n                                key={index}></div>\r\n                        )\r\n                    }) : null}\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(VisualizerBody)","import { available_algorithms } from '../../algorithms/algorithms';\r\nimport { connect } from 'react-redux';\r\nimport VisualizerBody from './visualizer-body';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        classes: state.classes,\r\n        selectedAlgorithm: available_algorithms[state.settings.algorithmIndex],\r\n        arraySize: state.settings.arraySize,\r\n        array: state.arrayState.array,\r\n        compared: state.arrayState.compared,\r\n        toSwap: state.arrayState.toSwap,\r\n        sorted: state.arrayState.sorted,\r\n        pivot: state.arrayState.pivot\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerBody);","import React, { Component } from \"react\";\r\nimport TopBar from \"./top-bar/top-bar-container\";\r\nimport VisualizerBody from \"./visualizer-body/visualizer-body-container\";\r\nimport { withStyles } from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n    appRoot: {\r\n\r\n    },\r\n    bodyRoot: {\r\n\r\n    }\r\n})\r\n\r\nclass App extends Component {\r\n    // Create initial array\r\n    componentDidMount() {\r\n        this.props.createArray(this.props.settings.initialArraySize);\r\n    }\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.appRoot}>\r\n                <TopBar></TopBar>\r\n                <div className={classes.bodyRoot}>\r\n                    <VisualizerBody></VisualizerBody>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);","import { connect } from \"react-redux\";\r\nimport App from './app';\r\nimport { setArray } from '../store/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return (state)\r\n};\r\nconst mapDispatchToProps = () => dispatch => ({\r\n    createArray: arraySize => {\r\n        let array = [];\r\n        while (array.length < arraySize) {\r\n            array.push(Math.floor(Math.random() * 200) + 5);\r\n        }\r\n        dispatch(setArray(array));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SET_COMPARED, SET_TO_SWAP, SET_ARRAY, SET_RUNNING, SET_SORTED, RESET_META_DATA, SET_PIVOT } from '../actions';\r\n\r\nconst initialState = {\r\n    running: false,\r\n    pivot : [],\r\n    array: [],\r\n    compared: [],\r\n    toSwap: [],\r\n    sorted: []\r\n}\r\n\r\nconst algorithmReducer = (state = initialState, action) => {\r\n    if (!action.type) {\r\n        return state\r\n    }\r\n    switch (action.type) {\r\n        case SET_ARRAY:\r\n            const { array } = action.payload;\r\n            return {\r\n                ...state,\r\n                array: array\r\n            }\r\n        case SET_COMPARED:\r\n            const { compared } = action.payload;\r\n            return {\r\n                ...state,\r\n                compared: compared\r\n            }\r\n        case SET_TO_SWAP:\r\n            const { toSwap } = action.payload;\r\n            return {\r\n                ...state,\r\n                toSwap: toSwap\r\n            }\r\n        case SET_RUNNING:\r\n            const { running } = action.payload;\r\n            return {\r\n                ...state,\r\n                running: running\r\n            }\r\n        case SET_SORTED:\r\n            const { sorted } = action.payload;\r\n            return {\r\n                ...state,\r\n                sorted: sorted\r\n            }\r\n        case SET_PIVOT:\r\n            const { pivot } = action.payload;\r\n            return {\r\n                ...state,\r\n                pivot: pivot\r\n            }\r\n        case RESET_META_DATA:\r\n            return {\r\n                ...state,\r\n                compared: [],\r\n                toSwap: [],\r\n                sorted: [],\r\n                pivot: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default algorithmReducer;","import { SET_ALGORITHM } from '../actions';\r\n\r\nconst initialState = {\r\n    initialArraySize: 10,\r\n    algorithmIndex: 0\r\n};\r\n\r\nconst topBarReducer = (state = initialState, action) => {\r\n    if(!state){\r\n        return state;\r\n    }\r\n    switch(action.type) {\r\n        case SET_ALGORITHM:\r\n            const { algorithmIndex } = action.payload;\r\n            return {\r\n                ...state,\r\n                algorithmIndex: algorithmIndex\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default topBarReducer;\r\n","import algorithmReducer from \"./algorithm-reducer\";\r\nimport topBarReducer from \"./top-bar-reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({settings: topBarReducer, arrayState: algorithmReducer});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/root-reducer.js\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport default createStore(rootReducer, composeWithDevTools());","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/app-container.js';\r\nimport store from './store/store.js';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}