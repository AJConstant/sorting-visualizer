{"version":3,"sources":["components/top-bar/run-button/run-button.jsx","store/actions.js","algorithms/algorithms.js","algorithms/bubble-sort.js","algorithms/merge-sort.js","algorithms/quick-sort.js","algorithms/insertion_sort.js","algorithms/heap_sort.js","components/top-bar/run-button/run-button-container.js","components/top-bar/sorting-select/sorting-select.jsx","components/top-bar/sorting-select/sorting-select-container.js","components/top-bar/array-size-select/array-size-select.jsx","components/top-bar/array-size-select/array-size-select-container.js","components/top-bar/top-bar.jsx","components/top-bar/top-bar-container.js","components/visualizer-body/visualizer-body.jsx","components/visualizer-body/visualizer-body-container.js","components/app.jsx","components/app-container.js","store/reducers/algorithm-reducer.js","store/reducers/top-bar-reducer.js","store/reducers/root-reducer.js","store/store.js","index.js"],"names":["RunButton","handleClick","props","beginSort","selectedIndex","array","this","classes","running","Button","variant","className","runButtonDisabled","runButton","disabled","onClick","CircularProgress","circularProgress","size","arrowIcon","React","Component","withStyles","theme","paddingRight","color","palette","primary","dark","secondary","main","marginLeft","spacing","paddingLeft","setRunning","type","payload","setArray","setCompared","compared","setToSwap","toSwap","setPivot","pivot","setSorted","sorted","available_algorithms","array_sizes","updateState","updates","dispatch","length","shift","setTimeout","bubbleSort","a","len","trace","tempArray","slice","i","j","push","temp","mergeSortHelper","startIdx","endIdx","inPlaceObj","mid","Math","floor","inPlaceIndex","arr1","arr2","merged","shouldSetSorted","pass","concat","merge","mergeSort","quickSortHelper","part","partition","quickSort","insertionSort","key","heapify","index","largest","left","right","heapSort","arrayState","connect","state","settings","algorithmIndex","SortingSelect","openMenu","event","setState","anchorEl","currentTarget","handleAlgorithmSelection","setAlgorithm","handleClose","selectedAlgorithm","selectionButton","aria-controls","aria-haspopup","Menu","id","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","Boolean","onClose","map","algo","MenuItem","minWidth","ArraySizeSelect","handleArraySizeSelection","createArray","arraySizeSelected","initialArraySize","arraySize","random","TopBar","root","AppBar","position","Typography","noWrap","title","Grid","container","grid","dropdownButton","width","backgroundColor","light","marginRight","borderRadius","shape","VisualizerBody","getWidth","num","justify","alignItems","arrayBody","includes","arrayElementToSwap","arrayElementCompared","arrayElementSorted","arrayElementPartition","arrayElement","style","height","top","transform","padding","flex","display","flexDirection","justifyConent","warning","error","success","App","appRoot","bodyRoot","initialState","algorithmReducer","action","topBarReducer","rootReducer","combineReducers","createStore","composeWithDevTools","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.38fe6001.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, CircularProgress } from '@material-ui/core';\r\nimport ArrowForwardIosSharpIcon from '@material-ui/icons/ArrowForwardIosSharp';\r\nimport { withStyles } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    runButton: {\r\n        paddingRight: '10px',\r\n        color: theme.palette.primary.dark\r\n    },\r\n    runButtonDisabled: {\r\n        paddingRight: '10px',\r\n        color: theme.palette.secondary.main\r\n    },\r\n    circularProgress: {        \r\n        color: theme.palette.secondary.main,\r\n        marginLeft: theme.spacing(1)\r\n    },\r\n    arrowIcon: {\r\n        paddingLeft: theme.spacing(1)\r\n    }\r\n});\r\n\r\nclass RunButton extends React.Component {\r\n    handleClick = () => {\r\n        this.props.beginSort(this.props.selectedIndex, this.props.array);\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            running,\r\n        } = this.props;\r\n        return (\r\n            <div>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    className={running? classes.runButtonDisabled : classes.runButton}\r\n                    disabled={running}\r\n                    onClick={this.handleClick}>{`Sort`}\r\n                    {running?\r\n                        <CircularProgress className={classes.circularProgress} size={20}></CircularProgress> :\r\n                        <ArrowForwardIosSharpIcon className={classes.arrowIcon}></ArrowForwardIosSharpIcon>\r\n                }\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(RunButton);","export const SET_ALGORITHM = \"SET_ALGORITHM\";\r\nexport const SET_ARRAY = \"SET_ARRAY\";\r\nexport const SET_COMPARED = \"SET_COMPARED\";\r\nexport const SET_TO_SWAP = \"SET_TO_SWAP\";\r\nexport const SET_RUNNING = \"SET_RUNNING\";\r\nexport const SET_SORTED = \"SET_SORTED\";\r\nexport const SET_PIVOT = \"SET_PIVOT\";\r\nexport const RESET_META_DATA = \"RESET_META_DATA\";\r\n\r\n/** Settings Actions */\r\nexport const setAlgorithm = algorithmIndex => ({\r\n    type: SET_ALGORITHM,\r\n    payload: {\r\n        algorithmIndex:  algorithmIndex \r\n    }\r\n});\r\n\r\nexport const setRunning = running => ({\r\n    type: SET_RUNNING,\r\n    payload: {\r\n        running: running\r\n    }\r\n});\r\n\r\n/** Sorting Actions */\r\nexport const resetMetaData = () => ({\r\n    type: RESET_META_DATA,\r\n    payload: {}\r\n})\r\nexport const setArray = array => ({\r\n    type: SET_ARRAY,\r\n    payload: {\r\n        array: array\r\n    }\r\n});\r\n\r\nexport const setCompared = compared => ({\r\n    type: SET_COMPARED,\r\n    payload: {\r\n        compared: compared\r\n    }\r\n});\r\n\r\nexport const setToSwap = toSwap => ({\r\n    type: SET_TO_SWAP,\r\n    payload: {\r\n        toSwap: toSwap\r\n    }\r\n});\r\n\r\nexport const setPivot = pivot => ({\r\n    type: SET_PIVOT,\r\n    payload: {\r\n        pivot: pivot\r\n    }\r\n})\r\n\r\nexport const setSorted = sorted => ({\r\n    type: SET_SORTED,\r\n    payload: {\r\n        sorted: sorted\r\n    }\r\n})","import { setCompared, setToSwap, setRunning, setPivot } from '../store/actions';\r\n\r\nconst available_algorithms = [\r\n    'Bubble Sort',\r\n    'Merge Sort',\r\n    'Quick Sort',\r\n    'Insertion Sort',\r\n    'Heap Sort'\r\n]\r\n\r\nconst array_sizes = [5, 10, 25, 50, 75, 100, 150]\r\n\r\nconst updateState = (updates, dispatch) => {\r\n    if (!updates.length) {\r\n        dispatch(setCompared([]));\r\n        dispatch(setToSwap([]));\r\n        dispatch(setPivot([]));\r\n        dispatch(setRunning(false));\r\n        return;\r\n    }\r\n    dispatch(updates.shift());\r\n    setTimeout(() => {\r\n        updateState(updates, dispatch)\r\n    }, 5)\r\n}\r\n\r\n\r\nexport {available_algorithms};\r\nexport {array_sizes};\r\nexport default updateState;\r\n","import { setCompared, setToSwap, setArray, setSorted } from '../store/actions';\r\nimport updateState from '../algorithms/algorithms';\r\n\r\nconst bubbleSort = async (array, dispatch) => {\r\n    const len = array.length;\r\n    // This is a trace of the algorithm\r\n    let trace = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    for (let i = 0; i < len - 1; i++) {\r\n        for (let j = 0; j < len - i - 1; j++) {\r\n            trace.push(setCompared([j, j + 1]));\r\n            if (tempArray[j] > tempArray[j + 1]) {\r\n                trace.push(setToSwap([j, j + 1]));\r\n                let temp = tempArray[j];\r\n                tempArray[j] = tempArray[j + 1];\r\n                tempArray[j + 1] = temp;\r\n            }\r\n            trace.push(setArray(tempArray.slice(0)));\r\n            trace.push(setToSwap([]));\r\n        }\r\n        sorted.push(len-i-1);\r\n        trace.push(setSorted(sorted.slice()));\r\n    }\r\n    sorted.push(0);\r\n    trace.push(setSorted(sorted.slice()));\r\n    updateState(trace, dispatch);\r\n    return array;\r\n}\r\n\r\nexport default bubbleSort;","import { setArray, setSorted } from '../store/actions';\r\nimport updateState from './algorithms';\r\n\r\nconst merge = (arr1, arr2, startIdx, endIdx, updates, inPlaceObj, sorted) => {\r\n    let merged = [];\r\n    let shouldSetSorted = arr1.length + arr2.length === inPlaceObj.array.length;\r\n    let pass = 0;\r\n    while (arr1.length && arr2.length) {\r\n        if (arr1[0] < arr2[0]) {\r\n            merged.push(arr1.shift());\r\n        } else {\r\n            merged.push(arr2.shift());\r\n            inPlaceObj.array = inPlaceObj.array.slice(0, startIdx)\r\n                .concat(merged).concat(arr1).concat(arr2)\r\n                .concat(inPlaceObj.array.slice(endIdx + 1));\r\n            updates.push(setArray(inPlaceObj.array.slice()));\r\n        }\r\n        if(shouldSetSorted){\r\n            sorted.push(pass);\r\n            updates.push(setSorted(sorted.slice(0)));\r\n        }\r\n        pass++;\r\n    }\r\n    if(shouldSetSorted){\r\n        while(pass <= inPlaceObj.array.length){\r\n            sorted.push(pass);\r\n            updates.push(setSorted(sorted.slice(0)));\r\n            pass++;\r\n        }\r\n    }\r\n    return merged.concat(arr1.slice().concat(arr2.slice()));\r\n}\r\n\r\nconst mergeSort = (array, dispatch) => {\r\n    let updates = [];\r\n    let sorted = [];\r\n    mergeSortHelper(array, 0, array.length - 1, dispatch, updates, { array: array.slice() }, sorted);\r\n    updateState(updates, dispatch);\r\n}\r\n\r\n/**\r\n * Merge sort is NOT an in place sorting algorithm. \r\n * This implementation attempts to visualize the action of \r\n * merge sort on an array by applying intermediate steps of the sort to\r\n * the base array.\r\n * \r\n * Note: the inPlace array is nested within an object in order to maintain proper\r\n * references to it throughout the call stack\r\n * @param {} array \r\n * @param {} dispatch \r\n */\r\nconst mergeSortHelper = (array, startIdx, endIdx, dispatch, updates, inPlaceObj, sorted) => {\r\n    const len = array.length;\r\n    if (len <= 1) return array;\r\n    let mid = Math.floor(len / 2);\r\n    let inPlaceIndex = Math.floor((startIdx + endIdx + 1) / 2);\r\n    let left = mergeSortHelper(array.slice(0, mid), startIdx, inPlaceIndex - 1, dispatch, updates, inPlaceObj, sorted);\r\n    let right = mergeSortHelper(array.slice(mid), inPlaceIndex, endIdx, dispatch, updates, inPlaceObj, sorted);\r\n    return merge(left, right, startIdx, endIdx, updates, inPlaceObj, sorted);\r\n}\r\n\r\nexport default mergeSort\r\n\r\n\r\n","import { setArray, setPivot, setToSwap, setSorted } from '../store/actions';\r\nimport updateState from './algorithms';\r\n\r\nconst partition = (array, startIdx, endIdx, updates, sorted) => {\r\n    let i = startIdx - 1;\r\n    let j = endIdx + 1;\r\n    let pivot = startIdx;\r\n    updates.push(setPivot([pivot]));\r\n    while (true) {\r\n        i++;\r\n        while (array[i] < array[pivot]){\r\n            i++;\r\n        }\r\n        j--;\r\n        while (array[j] > array[pivot]){\r\n            j--;\r\n        }\r\n        if (i >= j) {\r\n            sorted.push(j);\r\n            updates.push(setSorted(sorted.slice(0)));\r\n            return j;\r\n        }\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n        updates.push(setToSwap([i, j]));\r\n        updates.push(setArray(array.slice(0)));\r\n    }\r\n}\r\n\r\nconst quickSortHelper = (array, startIdx, endIdx, updates, sorted) => {\r\n    if (startIdx >= endIdx){\r\n        return;\r\n    }\r\n    let part = partition(array, startIdx, endIdx, updates, sorted);\r\n    quickSortHelper(array, startIdx, part, updates, sorted);\r\n    quickSortHelper(array, part + 1, endIdx, updates, sorted);\r\n}\r\n\r\nconst quickSort = (array, dispatch) => {\r\n    let updates = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    quickSortHelper(tempArray, 0, tempArray.length - 1, updates, sorted);\r\n    sorted.push(array.length-1);\r\n    updates.push(setSorted(sorted.slice(0)));\r\n    updateState(updates, dispatch);\r\n}\r\n\r\nexport default quickSort;","import { setArray, setCompared, setToSwap, setSorted } from '../store/actions';\r\nimport updateState from './algorithms';\r\n\r\n\r\nconst insertionSort = (array, dispatch) => {\r\n    let trace = [];\r\n    let sorted = [];\r\n    let tempArray = array.slice(0);\r\n    const len = tempArray.length;\r\n    for(let i = 1; i < len; i++){\r\n        let key = tempArray[i];\r\n        let j = i-1;\r\n        trace.push(setCompared([j, i]));\r\n        while(j >= 0 && tempArray[j] > key){\r\n            trace.push(setToSwap([j, j+1]))\r\n            tempArray[j+1] = tempArray[j];\r\n            j--;\r\n            trace.push(setArray(tempArray.slice(0)));\r\n            trace.push(setCompared([j, j+1]));\r\n        }\r\n        tempArray[j+1] = key;\r\n        trace.push(setArray(tempArray.slice(0)));\r\n        sorted.push(i-1);\r\n        trace.push(setSorted(sorted.slice(0)));\r\n    }\r\n    sorted.push(len-1);\r\n    trace.push(setSorted(sorted.slice(0)));\r\n    updateState(trace, dispatch);\r\n    return tempArray;\r\n}\r\n\r\n\r\n\r\nexport default insertionSort;","import updateState from './algorithms';\r\nimport { setArray, setSorted, setToSwap } from '../store/actions';\r\n\r\n\r\nconst heapify = (array, len, index, sorted, trace) => {\r\n    let largest = index,\r\n        left = 2*index + 1,\r\n        right = 2*index + 2;\r\n\r\n    if (left < len && array[largest] < array[left]) {\r\n        largest = left;\r\n    }\r\n\r\n    if (right < len && array[largest] < array[right]) {\r\n        largest = right;\r\n    }\r\n\r\n    if (largest !== index) {\r\n        trace.push(setToSwap([index, largest]));\r\n        let temp = array[index];\r\n        array[index] = array[largest];\r\n        array[largest] = temp;\r\n        trace.push(setArray(array.slice(0)));\r\n        heapify(array, len, largest, sorted, trace);\r\n    }\r\n}\r\n\r\nconst heapSort = (arrayState, dispatch) => {\r\n    let array = arrayState.slice(0);\r\n    const len = array.length;\r\n    let sorted = [];\r\n    let trace = [];\r\n    // Build maxheap\r\n    for(let i = Math.floor(len/2) - 1; i >= 0; i--){\r\n        heapify(array, len, i, sorted, trace)\r\n    }\r\n    for(let i=len-1; i>0; i--){\r\n        trace.push(setToSwap([0, i]));\r\n        let temp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = temp;\r\n        sorted.push(i);\r\n        trace.push(setArray(array.slice(0)));\r\n        trace.push(setSorted(sorted.slice(0)));\r\n        heapify(array, i, 0, sorted, trace);\r\n    }\r\n    sorted.push(0);\r\n    trace.push(setSorted(sorted.slice(0)));\r\n    updateState(trace, dispatch);\r\n    return array;\r\n}\r\n\r\nexport default heapSort;","import { connect } from 'react-redux';\r\nimport RunButton from './run-button';\r\nimport { setRunning, resetMetaData } from '../../../store/actions';\r\nimport  bubbleSort from '../../../algorithms/bubble-sort';\r\nimport mergeSort from '../../../algorithms/merge-sort';\r\nimport quickSort from '../../../algorithms/quick-sort';\r\nimport insertionSort from '../../../algorithms/insertion_sort';\r\nimport heapSort from '../../../algorithms/heap_sort';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        selectedIndex: state.settings.algorithmIndex,\r\n        running: state.arrayState.running,\r\n        array: state.arrayState.array\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    beginSort: (algorithmIndex, array) => {\r\n        dispatch(setRunning(true));\r\n        dispatch(resetMetaData());\r\n        switch(algorithmIndex){\r\n            case 0:\r\n                bubbleSort(array, dispatch);\r\n                return;\r\n            case 1:\r\n                mergeSort(array, dispatch);\r\n                return;\r\n            case 2:\r\n                quickSort(array, dispatch);\r\n                return;\r\n            case 3:\r\n                insertionSort(array, dispatch);\r\n                return;\r\n            case 4:\r\n                heapSort(array, dispatch);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RunButton);","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Menu, MenuItem, Button } from \"@material-ui/core\";\r\nimport ArrowDropDownSharpIcon from '@material-ui/icons/ArrowDropDownSharp';\r\nimport { available_algorithms } from '../../../algorithms/algorithms';\r\n\r\nconst styles = theme => ({\r\n    selectionButton: {\r\n        minWidth: 120,\r\n    },\r\n});\r\n\r\nclass SortingSelect extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            anchorEl: null\r\n        }\r\n    }\r\n    openMenu = (event) => {\r\n        this.setState({\r\n            anchorEl: event.currentTarget\r\n        });\r\n    }\r\n    handleAlgorithmSelection = (index) => {\r\n        this.props.setAlgorithm(index);\r\n        this.setState({\r\n            anchorEl: null\r\n        });\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            anchorEl: null\r\n        })\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            selectedAlgorithm,\r\n            running\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.selectionButton}>\r\n                <Button \r\n                    aria-controls=\"algorithm-select\" \r\n                    aria-haspopup=\"true\"\r\n                    disabled={running} \r\n                    onClick={this.openMenu}>\r\n                    {selectedAlgorithm}\r\n                    <ArrowDropDownSharpIcon></ArrowDropDownSharpIcon>\r\n                </Button>\r\n                <Menu\r\n                    id=\"algorithm-select-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    getContentAnchorEl={null}\r\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\"}}\r\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {available_algorithms.map((algo, index) => (\r\n                        <MenuItem\r\n                            key={algo}\r\n                            onClick={() => this.handleAlgorithmSelection(index)}\r\n                        >{algo}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(SortingSelect);","import { available_algorithms } from '../../../algorithms/algorithms.js';\r\nimport { connect } from 'react-redux';\r\nimport SortingSelect from './sorting-select';\r\nimport { setAlgorithm } from '../../../store/actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        selectedAlgorithm: available_algorithms[state.settings.algorithmIndex],\r\n        running: state.arrayState.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setAlgorithm: index => dispatch(setAlgorithm(index)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingSelect);","import React from \"react\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Menu, MenuItem, Button } from \"@material-ui/core\";\r\nimport ArrowDropDownSharpIcon from '@material-ui/icons/ArrowDropDownSharp';\r\nimport { array_sizes } from '../../../algorithms/algorithms';\r\n\r\nconst styles = theme => ({\r\n    selectionButton: {\r\n        minWidth: 120,\r\n    },\r\n});\r\n\r\nclass ArraySizeSelect extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            arraySizeSelected: this.props.initialArraySize,\r\n            anchorEl: null\r\n        }\r\n    }\r\n\r\n    openMenu = (event) => {\r\n        this.setState({\r\n            anchorEl: event.currentTarget\r\n        });\r\n    }\r\n    handleArraySizeSelection = (size) => {\r\n        this.props.createArray(size);\r\n        this.setState({\r\n            arraySizeSelected: size,\r\n            anchorEl: null\r\n        });\r\n    }\r\n    handleClose = () => {\r\n        this.setState({\r\n            anchorEl: null\r\n        })\r\n    }\r\n    render() {\r\n        const {\r\n            classes,\r\n            running\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.selectionButton}>\r\n                <Button \r\n                    aria-controls=\"array-size-select\" \r\n                    aria-haspopup=\"true\"\r\n                    disabled={running} \r\n                    onClick={this.openMenu}>\r\n                    {`Array size: ${this.state.arraySizeSelected}`}\r\n                    <ArrowDropDownSharpIcon></ArrowDropDownSharpIcon>\r\n                </Button>\r\n                <Menu\r\n                    id=\"algorithm-select-menu\"\r\n                    anchorEl={this.state.anchorEl}\r\n                    getContentAnchorEl={null}\r\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\"}}\r\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                    keepMounted\r\n                    open={Boolean(this.state.anchorEl)}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    {array_sizes.map(size => (\r\n                        <MenuItem\r\n                            key={size}\r\n                            onClick={() => this.handleArraySizeSelection(size)}\r\n                        >{size}</MenuItem>\r\n                    ))}\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ArraySizeSelect);","import { connect } from 'react-redux';\r\nimport ArraySizeSelect from './array-size-select';\r\nimport { setArray, resetMetaData } from '../../../store/actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        classes: state.classes,\r\n        initialArraySize: state.settings.initialArraySize,\r\n        running: state.arrayState.running\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    createArray: arraySize => {\r\n        let array = [];\r\n        while (array.length < arraySize) {\r\n            array.push(Math.floor(Math.random() * 200) + 5);\r\n        }\r\n        dispatch(setArray(array));\r\n        dispatch(resetMetaData());\r\n    },\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArraySizeSelect);","import React from \"react\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport RunButton from './run-button/run-button-container';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport SortingSelect from \"./sorting-select/sorting-select-container\";\r\nimport ArraySizeSelect from \"./array-size-select/array-size-select-container\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.primary.light\r\n    },\r\n    grid: {\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n    },\r\n    title: {\r\n        width: '60%',\r\n        paddingRight: theme.spacing(4),\r\n        paddingLeft: theme.spacing(4)\r\n    },\r\n    dropdownButton: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        paddingRight: theme.spacing(4),\r\n    },\r\n    runButton: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        paddingRight: theme.spacing(4),\r\n        paddingLeft: theme.spacing(4),\r\n        marginLeft: theme.spacing(4)\r\n    }\r\n});\r\n\r\nclass TopBar extends React.Component {\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar className={classes.root} position=\"static\">\r\n                    <ToolBar>\r\n                        <Typography variant=\"h3\"\r\n                            noWrap\r\n                            className={classes.title}> \r\n                            Sorting Visualizer\r\n                        </Typography>\r\n                        <Grid container className={classes.grid}>\r\n                            <SortingSelect className={classes.dropdownButton}></SortingSelect>\r\n                            <ArraySizeSelect className={classes.dropdownButton}></ArraySizeSelect>\r\n                            <RunButton className={classes.runButton}></RunButton>\r\n                        </Grid>\r\n                    </ToolBar>\r\n                </AppBar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(TopBar);","import { connect } from \"react-redux\";\r\nimport TopBar from './top-bar';\r\n\r\nconst mapStateToProps = (state) => ({state});\r\n\r\nconst mapDispatchToProps = () => dispatch => ({\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);","import React from 'react';\r\nimport { withStyles, Grid } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        position: 'absolute',\r\n        top: '50%',\r\n        transform: 'translateY(-50%)',\r\n        padding: theme.spacing(2),\r\n        flex: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyConent: 'center'\r\n    },\r\n    arrayElement: {\r\n        backgroundColor: theme.palette.primary.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementCompared: {\r\n        backgroundColor: theme.palette.warning.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementToSwap: {\r\n        backgroundColor: theme.palette.error.light,\r\n        marginLeft: '3px',\r\n    },\r\n    arrayElementSorted: {\r\n        backgroundColor: theme.palette.success.light,\r\n        marginLeft: '3px'\r\n    },\r\n    arrayElementPartition: {\r\n        backgroundColor: theme.palette.secondary.light,\r\n        marginLeft: '3px'\r\n    }\r\n})\r\n\r\nclass VisualizerBody extends React.Component {\r\n    getWidth = (num) => {\r\n        switch (num) {\r\n            case 5:\r\n                return 40;\r\n            case 10:\r\n                return 20;\r\n            case 25:\r\n                return 10;\r\n            case 50:\r\n                return 9;\r\n            case 75:\r\n                return 8;\r\n            case 100:\r\n                return 6;\r\n            case 150:\r\n                return 5;\r\n            default:\r\n                return 5;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            array,\r\n            compared,\r\n            toSwap,\r\n            sorted,\r\n            pivot,\r\n        } = this.props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                    className={classes.arrayBody}>\r\n                    {array && array.length ? array.map((num, index) => {\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    toSwap.includes(index) ? classes.arrayElementToSwap :\r\n                                        compared.includes(index) ? classes.arrayElementCompared :\r\n                                            sorted.includes(index) ? classes.arrayElementSorted :\r\n                                                pivot.includes(index) ? classes.arrayElementPartition :\r\n                                                    classes.arrayElement}\r\n                                style={{\r\n                                    width: `${this.getWidth(array.length)}px`,\r\n                                    height: `${2 * num}px`\r\n                                }}\r\n                                key={index}></div>\r\n                        )\r\n                    }) : null}\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(VisualizerBody)","import { available_algorithms } from '../../algorithms/algorithms';\r\nimport { connect } from 'react-redux';\r\nimport VisualizerBody from './visualizer-body';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        classes: state.classes,\r\n        selectedAlgorithm: available_algorithms[state.settings.algorithmIndex],\r\n        arraySize: state.settings.arraySize,\r\n        array: state.arrayState.array,\r\n        compared: state.arrayState.compared,\r\n        toSwap: state.arrayState.toSwap,\r\n        sorted: state.arrayState.sorted,\r\n        pivot: state.arrayState.pivot\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VisualizerBody);","import React, { Component } from \"react\";\r\nimport TopBar from \"./top-bar/top-bar-container\";\r\nimport VisualizerBody from \"./visualizer-body/visualizer-body-container\";\r\nimport { withStyles } from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n    appRoot: {\r\n\r\n    },\r\n    bodyRoot: {\r\n\r\n    }\r\n})\r\n\r\nclass App extends Component {\r\n    // Create initial array\r\n    componentDidMount() {\r\n        this.props.createArray(this.props.settings.initialArraySize);\r\n    }\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.appRoot}>\r\n                <TopBar></TopBar>\r\n                <div className={classes.bodyRoot}>\r\n                    <VisualizerBody></VisualizerBody>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);","import { connect } from \"react-redux\";\r\nimport App from './app';\r\nimport { setArray } from '../store/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return (state)\r\n};\r\nconst mapDispatchToProps = () => dispatch => ({\r\n    createArray: arraySize => {\r\n        let array = [];\r\n        while (array.length < arraySize) {\r\n            array.push(Math.floor(Math.random() * 200) + 5);\r\n        }\r\n        dispatch(setArray(array));\r\n    },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { SET_COMPARED, SET_TO_SWAP, SET_ARRAY, SET_RUNNING, SET_SORTED, RESET_META_DATA, SET_PIVOT } from '../actions';\r\n\r\nconst initialState = {\r\n    running: false,\r\n    pivot : [],\r\n    array: [],\r\n    compared: [],\r\n    toSwap: [],\r\n    sorted: []\r\n}\r\n\r\nconst algorithmReducer = (state = initialState, action) => {\r\n    if (!action.type) {\r\n        return state\r\n    }\r\n    switch (action.type) {\r\n        case SET_ARRAY:\r\n            const { array } = action.payload;\r\n            return {\r\n                ...state,\r\n                array: array\r\n            }\r\n        case SET_COMPARED:\r\n            const { compared } = action.payload;\r\n            return {\r\n                ...state,\r\n                compared: compared\r\n            }\r\n        case SET_TO_SWAP:\r\n            const { toSwap } = action.payload;\r\n            return {\r\n                ...state,\r\n                toSwap: toSwap\r\n            }\r\n        case SET_RUNNING:\r\n            const { running } = action.payload;\r\n            return {\r\n                ...state,\r\n                running: running\r\n            }\r\n        case SET_SORTED:\r\n            const { sorted } = action.payload;\r\n            return {\r\n                ...state,\r\n                sorted: sorted\r\n            }\r\n        case SET_PIVOT:\r\n            const { pivot } = action.payload;\r\n            return {\r\n                ...state,\r\n                pivot: pivot\r\n            }\r\n        case RESET_META_DATA:\r\n            return {\r\n                ...state,\r\n                compared: [],\r\n                toSwap: [],\r\n                sorted: [],\r\n                pivot: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default algorithmReducer;","import { SET_ALGORITHM } from '../actions';\r\n\r\nconst initialState = {\r\n    initialArraySize: 10,\r\n    algorithmIndex: 0\r\n};\r\n\r\nconst topBarReducer = (state = initialState, action) => {\r\n    if(!state){\r\n        return state;\r\n    }\r\n    switch(action.type) {\r\n        case SET_ALGORITHM:\r\n            const { algorithmIndex } = action.payload;\r\n            return {\r\n                ...state,\r\n                algorithmIndex: algorithmIndex\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default topBarReducer;\r\n","import algorithmReducer from \"./algorithm-reducer\";\r\nimport topBarReducer from \"./top-bar-reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({settings: topBarReducer, arrayState: algorithmReducer});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers/root-reducer.js\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport default createStore(rootReducer, composeWithDevTools());","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/app-container.js';\r\nimport store from './store/store.js';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}